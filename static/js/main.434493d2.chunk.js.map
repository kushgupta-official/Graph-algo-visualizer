{"version":3,"sources":["graphAlgoVisualizer/node/node.jsx","graphAlgoVisualizer/navbar.jsx","algorithms/dijkstra.js","algorithms/aStar.js","algorithms/bfs.js","algorithms/dfs.js","graphAlgoVisualizer/graphAlgoVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","state","getClassName","str","props","isStart","isEnd","isWall","weight","this","row","column","onMouseDown","onMouseUp","onMouseEnter","className","id","Component","Checkbox","type","classNavbar","currentAlgo","addWeights","forDijkstra","setState","forAstar","forBFS","forDFS","visualize","handleDijkstra","handleAstar","handleBFS","handleDFS","handleCheckboxChange","console","log","handleClearAlgorithm","handleClearGrid","Navbar","bg","variant","expand","Brand","Toggle","aria-controls","Collapse","Nav","NavDropdown","title","Item","onClick","Button","checked","onChange","dijkstra","grid","startNode","endNode","visitedNodeInOrder","distance","unvisitedNodes","nodes","columns","push","getAllNodes","length","sortNodesByDistance","nearestNode","shift","isVisited","Infinity","updateUnvisitedNeighbours","sort","nodeA","nodeB","node","unvisitedNeighbours","getUnvisitedNeighbours","ite","previousNode","getShortestPathDijkstra","shortestPath","previous","reverse","getWeightOfShortestPathDijkstra","weightOfPath","aStar","visitedNodesInOrder","Math","abs","toReturn","rows","sortNodesByValueF","nextNode","currentNode","targetNode","distanceBetweenCurrentAndTarget","g_currentNode","g_ite","h_ite","getShortestPathAstar","getWeightOfShortestPathAstar","bfs","queue","currNode","pushNeighboursOfCurrentNode","neighboursOfCurrentNode","getNeighboursOfCurrentNode","getPathBFS","path","getWeightOfShortestPathBFS","dfs","stack","pop","pushNeighboursOfNode","neighboursOfNode","getNeighboursOfNode","getPathDFS","getWeightOfPathDFS","startNode_Row","startNode_Col","endNode_Row","endNode_Col","GraphAlgoVisualizer","isMousePressed","timeComplexity","pathCost","pathLength","isMovingStart","isMovingEnd","processActive","getNewGridWithWallToggled","newGrid","slice","newNode","getNewGridWithWeights","changeInValue","handleMouseDown","handleMouseEnter","handleMouseUp","animateAlgo","document","getElementById","disabled","i","j","setTimeout","visualizeDijkstra","clearAlgo","shortestPathCost","visualizeAstar","visualizeBFS","visualizeDFS","undoAlgoAndWalls","currentRow","map","rowIdx","key","nodeIdx","App","Boolean","window","location","hostname","match","ReactGA","initialize","pageview","pathname","search","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.434493d2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./node.css\";\r\n\r\nclass Node extends Component {\r\n  state = {};\r\n  getClassName = () => {\r\n    let str = \"node\";\r\n    if (this.props.isStart === true) {\r\n      str = str + \" startNode\";\r\n    } else if (this.props.isEnd === true) {\r\n      str = str + \" endNode\";\r\n    } else if (this.props.isWall === true) {\r\n      str = str + \" wall-true\";\r\n    } else if (this.props.weight > 0) {\r\n      str = str + \" weight-present\";\r\n    }\r\n    return str;\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      row,\r\n      column,\r\n      // isStart,\r\n      // isEnd,\r\n      // distance,\r\n      // isVisited,\r\n      // previousNode,\r\n      // isWall,\r\n      // weight,\r\n      onMouseDown,\r\n      onMouseUp,\r\n      onMouseEnter,\r\n    } = this.props;\r\n    //console.log(  this.props);\r\n    return (\r\n      <div\r\n        className={this.getClassName()}\r\n        id={`node-${row}-${column}`}\r\n        onMouseDown={() => onMouseDown(row, column)}\r\n        onMouseEnter={() => onMouseEnter(row, column)}\r\n        onMouseUp={() => onMouseUp(row, column)}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Node;\r\n","import React, { Component } from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport \"./graphAlgoVisualizer.css\";\r\n\r\nconst Checkbox = (props) => <input type=\"checkbox\" {...props} />;\r\n\r\nclass classNavbar extends Component {\r\n  state = {\r\n    currentAlgo: \"null\",\r\n    addWeights: \"false\",\r\n  };\r\n  forDijkstra = () => {\r\n    this.setState({ currentAlgo: \"Dijkstra\" });\r\n  };\r\n  forAstar = () => {\r\n    this.setState({ currentAlgo: \"Astar\" });\r\n  };\r\n  forBFS = () => {\r\n    this.setState({ currentAlgo: \"BFS\" });\r\n  };\r\n  forDFS = () => {\r\n    this.setState({ currentAlgo: \"DFS\" });\r\n  };\r\n  visualize = () => {\r\n    if (this.state.currentAlgo === \"Dijkstra\") {\r\n      this.props.handleDijkstra();\r\n    } else if (this.state.currentAlgo === \"Astar\") {\r\n      this.props.handleAstar();\r\n    } else if (this.state.currentAlgo === \"BFS\") {\r\n      this.props.handleBFS();\r\n    } else if (this.state.currentAlgo === \"DFS\") {\r\n      this.props.handleDFS();\r\n    }\r\n  };\r\n  handleCheckboxChange = () => {\r\n    console.log(this.state.addWeights);\r\n    this.setState({ addWeights: !this.state.addWeights });\r\n    console.log(this.state.addWeights, \"hi\");\r\n  };\r\n  render() {\r\n    const {\r\n      handleClearAlgorithm,\r\n      handleClearGrid,\r\n      addWeights,\r\n      handleCheckboxChange,\r\n    } = this.props;\r\n    return (\r\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\r\n        <Navbar.Brand className=\"mr-5\">Graph Algo Visualizer</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            {/* <Nav.Link href=\"#home\">Home</Nav.Link>\r\n            <Nav.Link href=\"#link\">Link</Nav.Link> */}\r\n            <NavDropdown title=\"Algorithms\" id=\"basic-nav-dropdown\">\r\n              <NavDropdown.Item onClick={this.forDijkstra}>\r\n                Dijkstra\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item onClick={this.forAstar}>\r\n                A* Search\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item onClick={this.forBFS}>\r\n                Breadth First Search\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item onClick={this.forDFS}>\r\n                Depth First Search\r\n              </NavDropdown.Item>\r\n              {/* <NavDropdown.Divider />\r\n              <NavDropdown.Item\">\r\n                Separated link\r\n              </NavDropdown.Item> */}\r\n            </NavDropdown>\r\n            <Button\r\n              variant=\"success\"\r\n              className=\"mx-5\"\r\n              onClick={this.visualize}\r\n              id=\"visualize\"\r\n            >\r\n              Visualize!\r\n            </Button>\r\n            <Button\r\n              variant=\"info\"\r\n              className=\"mx-5\"\r\n              id=\"clearAlgo\"\r\n              onClick={handleClearAlgorithm}\r\n            >\r\n              Clear Algorithm\r\n            </Button>\r\n            <Button\r\n              variant=\"info\"\r\n              className=\"mx-5\"\r\n              onClick={handleClearGrid}\r\n              id=\"clearGrid\"\r\n            >\r\n              Clear Grid\r\n            </Button>\r\n            <label>\r\n              <Checkbox checked={addWeights} onChange={handleCheckboxChange} />\r\n              <span className=\"checkBox\">Switch to Weights</span>\r\n            </label>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default classNavbar;\r\n","export function dijkstra(grid, startNode, endNode) {\r\n  const visitedNodeInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  console.log(unvisitedNodes);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const nearestNode = unvisitedNodes.shift();\r\n    nearestNode.isVisited = true;\r\n    if (nearestNode.distance === Infinity) {\r\n      return visitedNodeInOrder;\r\n    }\r\n    if (nearestNode.isWall === true) {\r\n      continue;\r\n    }\r\n    // nearestNode.isVisited = true;\r\n    visitedNodeInOrder.push(nearestNode);\r\n    if (nearestNode === endNode) {\r\n      return visitedNodeInOrder;\r\n    }\r\n    updateUnvisitedNeighbours(nearestNode, grid);\r\n    // console.log(visitedNodeInOrder);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbours(node, grid) {\r\n  const unvisitedNeighbours = getUnvisitedNeighbours(node, grid);\r\n  for (let ite of unvisitedNeighbours) {\r\n    if (ite.distance > node.distance + ite.weight) {\r\n      ite.distance = node.distance + ite.weight + 1;\r\n      ite.previousNode = node;\r\n    }\r\n  }\r\n  return unvisitedNeighbours;\r\n}\r\n\r\nfunction getUnvisitedNeighbours(node, grid) {\r\n  const unvisitedNeighbours = [];\r\n  const { row, column } = node;\r\n  if (row - 1 >= 0 && grid[row - 1][column].isVisited !== true)\r\n    unvisitedNeighbours.push(grid[row - 1][column]);\r\n\r\n  if (row + 1 < grid.length && grid[row + 1][column].isVisited !== true)\r\n    unvisitedNeighbours.push(grid[row + 1][column]);\r\n\r\n  if (column - 1 >= 0 && grid[row][column - 1].isVisited !== true)\r\n    unvisitedNeighbours.push(grid[row][column - 1]);\r\n\r\n  if (column + 1 < grid[0].length && grid[row][column + 1].isVisited !== true)\r\n    unvisitedNeighbours.push(grid[row][column + 1]);\r\n\r\n  return unvisitedNeighbours;\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  let nodes = [];\r\n  for (let row of grid) {\r\n    for (let columns of row) {\r\n      nodes.push(columns);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nexport function getShortestPathDijkstra(grid, startNode, endNode) {\r\n  const shortestPath = [];\r\n  let previous = endNode.previousNode;\r\n  if (previous === null) {\r\n    return shortestPath;\r\n  }\r\n  while (previous !== startNode) {\r\n    shortestPath.push(previous);\r\n    previous = previous.previousNode;\r\n  }\r\n  shortestPath.reverse();\r\n  return shortestPath;\r\n}\r\n\r\nexport function getWeightOfShortestPathDijkstra(grid, shortestPath) {\r\n  let weightOfPath = 0;\r\n  for (let ite of shortestPath) {\r\n    if (ite.weight === 0) {\r\n      weightOfPath = weightOfPath + 1;\r\n    } else {\r\n      weightOfPath = weightOfPath + ite.weight + 1;\r\n    }\r\n  }\r\n  return weightOfPath;\r\n}\r\n","//here distance is f in a* algo\r\n//f=g+h\r\nexport function aStar(grid, startNode, endNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance =\r\n    Math.abs(startNode.row - endNode.row) +\r\n    Math.abs(startNode.column - endNode.column);\r\n  // startNode.distance=0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByValueF(unvisitedNodes);\r\n    const nextNode = unvisitedNodes.shift();\r\n    if (nextNode.distance === Infinity) {\r\n      return visitedNodesInOrder;\r\n    }\r\n    if (nextNode.isWall) {\r\n      continue;\r\n    }\r\n    nextNode.isVisited = true;\r\n    visitedNodesInOrder.push(nextNode);\r\n    if (nextNode === endNode) {\r\n      return visitedNodesInOrder;\r\n    }\r\n    updateUnvisitedNeighbours(nextNode, endNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByValueF(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const toReturn = [];\r\n  for (let rows of grid) {\r\n    for (let columns of rows) {\r\n      toReturn.push(columns);\r\n    }\r\n  }\r\n  return toReturn;\r\n}\r\n\r\nfunction updateUnvisitedNeighbours(currentNode, targetNode, grid) {\r\n  const unvisitedNeighbours = getUnvisitedNeighbours(currentNode, grid);\r\n  const distanceBetweenCurrentAndTarget =\r\n    Math.abs(currentNode.row - targetNode.row) +\r\n    Math.abs(currentNode.column - targetNode.column);\r\n  const g_currentNode = currentNode.distance - distanceBetweenCurrentAndTarget;\r\n  for (let ite of unvisitedNeighbours) {\r\n    let g_ite = g_currentNode + ite.weight + 1;\r\n    let h_ite =\r\n      Math.abs(ite.row - targetNode.row) +\r\n      Math.abs(ite.column - targetNode.column);\r\n    if (ite.distance > g_ite + h_ite) {\r\n      ite.distance = g_ite + h_ite;\r\n      ite.previousNode = currentNode;\r\n    }\r\n  }\r\n  return unvisitedNeighbours;\r\n}\r\n\r\n// function updateUnvisitedNeighbours(currentNode, targetNode, grid) {\r\n//   const unvisitedNeighbours = getUnvisitedNeighbours(currentNode, grid);\r\n//   const distanceBetweenCurrentAndTarget =\r\n//     currentNode.distance -\r\n//     (Math.abs(currentNode.row - targetNode.row) +\r\n//       Math.abs(currentNode.column - targetNode.column));\r\n//   // const distanceBetweenCurrentAndTarget = currentNode.distance;\r\n//   for (let ite of unvisitedNeighbours) {\r\n//     if (\r\n//       ite.distance >\r\n//       distanceBetweenCurrentAndTarget +\r\n//         ite.weight +\r\n//         Math.abs(ite.row - targetNode.row) +\r\n//         Math.abs(ite.column - targetNode.column)\r\n//     ) {\r\n//       ite.distance =\r\n//         distanceBetweenCurrentAndTarget +\r\n//         ite.weight +\r\n//         Math.abs(ite.row - targetNode.row) +\r\n//         Math.abs(ite.column - targetNode.column);\r\n//       ite.previousNode = currentNode;\r\n//     }\r\n//   }\r\n//   return unvisitedNeighbours;\r\n// }\r\n\r\nfunction getUnvisitedNeighbours(currentNode, grid) {\r\n  const unvisitedNeighbours = [];\r\n  const { row, column } = currentNode;\r\n  if (row - 1 >= 0 && grid[row - 1][column].isVisited !== true)\r\n    unvisitedNeighbours.push(grid[row - 1][column]);\r\n\r\n  if (row + 1 < grid.length && grid[row + 1][column].isVisited !== true)\r\n    unvisitedNeighbours.push(grid[row + 1][column]);\r\n\r\n  if (column - 1 >= 0 && grid[row][column - 1].isVisited !== true)\r\n    unvisitedNeighbours.push(grid[row][column - 1]);\r\n\r\n  if (column + 1 < grid[0].length && grid[row][column + 1].isVisited !== true)\r\n    unvisitedNeighbours.push(grid[row][column + 1]);\r\n\r\n  return unvisitedNeighbours;\r\n}\r\n\r\nexport function getShortestPathAstar(grid, startNode, endNode) {\r\n  const shortestPath = [];\r\n  let previous = endNode.previousNode;\r\n  if (previous === null) {\r\n    return shortestPath;\r\n  }\r\n  while (previous !== startNode) {\r\n    shortestPath.push(previous);\r\n    previous = previous.previousNode;\r\n  }\r\n  shortestPath.reverse();\r\n  return shortestPath;\r\n}\r\n\r\nexport function getWeightOfShortestPathAstar(grid, shortestPath) {\r\n  let weightOfPath = 0;\r\n  for (let ite of shortestPath) {\r\n    if (ite.weight === 0) {\r\n      weightOfPath = weightOfPath + 1;\r\n    } else {\r\n      weightOfPath = weightOfPath + ite.weight + 1;\r\n    }\r\n  }\r\n  return weightOfPath;\r\n}\r\n","export function bfs(grid, startNode, endNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.isVisited = true;\r\n  //    const unvisitedNodes=extractAllNodes(grid);\r\n  const queue = [];\r\n  queue.push(startNode);\r\n  while (!!queue.length) {\r\n    const currNode = queue.shift();\r\n    if (currNode === endNode) {\r\n      return visitedNodesInOrder;\r\n    }\r\n    if (currNode.isWall) {\r\n      continue;\r\n    }\r\n    visitedNodesInOrder.push(currNode);\r\n    pushNeighboursOfCurrentNode(grid, queue, currNode);\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction pushNeighboursOfCurrentNode(grid, queue, currNode) {\r\n  const neighboursOfCurrentNode = getNeighboursOfCurrentNode(grid, currNode);\r\n  for (let node of neighboursOfCurrentNode) {\r\n    node.isVisited = true;\r\n    node.previousNode = currNode;\r\n    queue.push(node);\r\n  }\r\n}\r\n\r\nfunction getNeighboursOfCurrentNode(grid, currNode) {\r\n  const toReturn = [];\r\n  const row = currNode.row;\r\n  const column = currNode.column;\r\n\r\n  if (row - 1 >= 0 && !grid[row - 1][column].isVisited)\r\n    toReturn.push(grid[row - 1][column]);\r\n\r\n  if (column - 1 >= 0 && !grid[row][column - 1].isVisited)\r\n    toReturn.push(grid[row][column - 1]);\r\n\r\n  if (row + 1 < grid.length && !grid[row + 1][column].isVisited)\r\n    toReturn.push(grid[row + 1][column]);\r\n\r\n  if (column + 1 < grid[0].length && !grid[row][column + 1].isVisited)\r\n    toReturn.push(grid[row][column + 1]);\r\n\r\n  return toReturn;\r\n}\r\n\r\n// function extractAllNodes(grid){\r\n//     const toReturn=[];\r\n//     for (let row of grid){\r\n//         for (let column of row){\r\n//             toReturn.push(column);\r\n//         }\r\n//     }\r\n//     return toReturn;\r\n// }\r\n\r\nexport function getPathBFS(grid, startNode, endNode) {\r\n  const path = [];\r\n  let previous = endNode.previousNode;\r\n  if (previous === null) {\r\n    return path;\r\n  }\r\n  while (previous !== startNode) {\r\n    path.push(previous);\r\n    previous = previous.previousNode;\r\n  }\r\n  path.reverse();\r\n  return path;\r\n}\r\n\r\nexport function getWeightOfShortestPathBFS(grid, path) {\r\n  let weightOfPath = 0;\r\n  for (let ite of path) {\r\n    if (ite.weight === 0) {\r\n      weightOfPath = weightOfPath + 1;\r\n    } else {\r\n      weightOfPath = weightOfPath + ite.weight + 1;\r\n    }\r\n  }\r\n  return weightOfPath;\r\n}\r\n","export function dfs(grid, startNode, endNode) {\r\n  const visitedNodesInOrder = [];\r\n  const stack = [];\r\n  startNode.isVisited = true;\r\n  stack.push(startNode);\r\n  while (!!stack.length) {\r\n    const nextNode = stack.pop();\r\n    if (nextNode.isWall === true) {\r\n      continue;\r\n    }\r\n    visitedNodesInOrder.push(nextNode);\r\n    if (nextNode === endNode) {\r\n      return visitedNodesInOrder;\r\n    }\r\n    pushNeighboursOfNode(grid, stack, nextNode);\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction pushNeighboursOfNode(grid, stack, node) {\r\n  const neighboursOfNode = getNeighboursOfNode(grid, node);\r\n  for (let ite of neighboursOfNode) {\r\n    ite.previousNode = node;\r\n    ite.isVisited = true;\r\n    stack.push(ite);\r\n  }\r\n}\r\n\r\nfunction getNeighboursOfNode(grid, node) {\r\n  const unvisitedNeighbours = [];\r\n  const row = node.row;\r\n  const column = node.column;\r\n\r\n  if (row - 1 >= 0 && grid[row - 1][column].isVisited === false) {\r\n    unvisitedNeighbours.push(grid[row - 1][column]);\r\n  }\r\n  if (column - 1 >= 0 && grid[row][column - 1].isVisited === false) {\r\n    unvisitedNeighbours.push(grid[row][column - 1]);\r\n  }\r\n  if (row + 1 < grid.length && grid[row + 1][column].isVisited === false) {\r\n    unvisitedNeighbours.push(grid[row + 1][column]);\r\n  }\r\n  if (\r\n    column + 1 < grid[0].length &&\r\n    grid[row][column + 1].isVisited === false\r\n  ) {\r\n    unvisitedNeighbours.push(grid[row][column + 1]);\r\n  }\r\n\r\n  return unvisitedNeighbours;\r\n}\r\n\r\nexport function getPathDFS(grid, startNode, endNode) {\r\n  const path = [];\r\n  let previous = endNode.previousNode;\r\n  if (previous === null) {\r\n    return path;\r\n  }\r\n  while (previous !== startNode) {\r\n    path.push(previous);\r\n    previous = previous.previousNode;\r\n  }\r\n  path.reverse();\r\n  return path;\r\n}\r\n\r\nexport function getWeightOfPathDFS(grid, path) {\r\n  let weightOfPath = 0;\r\n  for (let ite of path) {\r\n    if (ite.weight === 0) {\r\n      weightOfPath = weightOfPath + 1;\r\n    } else {\r\n      weightOfPath = weightOfPath + ite.weight + 1;\r\n    }\r\n  }\r\n  return weightOfPath;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./node/node.jsx\";\r\nimport Navbar from \"./navbar\";\r\nimport \"./graphAlgoVisualizer.css\";\r\nimport {\r\n  dijkstra,\r\n  getShortestPathDijkstra,\r\n  getWeightOfShortestPathDijkstra,\r\n} from \"../algorithms/dijkstra.js\";\r\nimport {\r\n  aStar,\r\n  getShortestPathAstar,\r\n  getWeightOfShortestPathAstar,\r\n} from \"../algorithms/aStar.js\";\r\nimport {\r\n  bfs,\r\n  getPathBFS,\r\n  getWeightOfShortestPathBFS,\r\n} from \"../algorithms/bfs.js\";\r\nimport { dfs, getPathDFS, getWeightOfPathDFS } from \"../algorithms/dfs\";\r\n\r\nconst total_rows = 20;\r\nconst total_columns = 40;\r\nvar startNode_Row = 5;\r\nvar startNode_Col = 10;\r\nvar endNode_Row = 10;\r\nvar endNode_Col = 37;\r\nconst FixedWeight = 10;\r\n\r\n// const Checkbox = (props) => <input type=\"checkbox\" {...props} />;\r\nclass GraphAlgoVisualizer extends Component {\r\n  state = {\r\n    grid: [],\r\n    isMousePressed: false,\r\n    timeComplexity: 0,\r\n    pathCost: 0,\r\n    pathLength: 0,\r\n    isMovingStart: false,\r\n    isMovingEnd: false,\r\n    addWeights: false,\r\n    processActive: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const grid = [];\r\n    for (let row = 0; row < total_rows; row++) {\r\n      const currentRow = [];\r\n      for (let column = 0; column < total_columns; column++) {\r\n        const currentNode = {\r\n          row,\r\n          column,\r\n          isStart: row === startNode_Row && column === startNode_Col,\r\n          isEnd: row === endNode_Row && column === endNode_Col,\r\n          distance: Infinity,\r\n          weight: 0,\r\n          isVisited: false,\r\n          previousNode: null,\r\n          isWall: false,\r\n        };\r\n        currentRow.push(currentNode);\r\n      }\r\n      grid.push(currentRow);\r\n    }\r\n    this.setState({ grid });\r\n  }\r\n\r\n  getNewGridWithWallToggled = (row, column) => {\r\n    const newGrid = this.state.grid.slice();\r\n    const node = newGrid[row][column];\r\n    const newNode = {\r\n      ...node,\r\n      isWall: !node.isWall,\r\n      weight: 0,\r\n    };\r\n    newGrid[row][column] = newNode;\r\n    return newGrid;\r\n  };\r\n\r\n  getNewGridWithWeights = (row, column) => {\r\n    const newGrid = this.state.grid.slice();\r\n    const node = newGrid[row][column];\r\n    let changeInValue = 0;\r\n    if (node.weight === 0) {\r\n      changeInValue = FixedWeight;\r\n    } else {\r\n      changeInValue = -FixedWeight;\r\n    }\r\n    const newNode = {\r\n      ...node,\r\n      isWall: false,\r\n      weight: node.weight + changeInValue,\r\n    };\r\n    newGrid[row][column] = newNode;\r\n    return newGrid;\r\n  };\r\n\r\n  handleMouseDown = (row, column) => {\r\n    if (this.state.processActive === true) {\r\n      return;\r\n    }\r\n    if (\r\n      !(\r\n        (row === startNode_Row && column === startNode_Col) ||\r\n        (row === endNode_Row && column === endNode_Col)\r\n      )\r\n    ) {\r\n      console.log(row, column, \"mouse down\");\r\n      let newGrid;\r\n      if (!this.state.addWeights) {\r\n        newGrid = this.getNewGridWithWallToggled(row, column);\r\n      } else {\r\n        newGrid = this.getNewGridWithWeights(row, column);\r\n      }\r\n      this.setState({ grid: newGrid, isMousePressed: true });\r\n    }\r\n    // if user wants to change positon of start or end node\r\n    else {\r\n      console.log(row, column, \"mouse down starting or ending\");\r\n      this.setState({ isMousePressed: true });\r\n      if (row === startNode_Row && column === startNode_Col) {\r\n        const newGrid = this.state.grid.slice();\r\n        const node = newGrid[row][column];\r\n        const newNode = {\r\n          ...node,\r\n          isStart: false,\r\n        };\r\n        newGrid[row][column] = newNode;\r\n        this.setState({ grid: newGrid, isMovingStart: true });\r\n      } else if (row === endNode_Row && column === endNode_Col) {\r\n        const newGrid = this.state.grid.slice();\r\n        const node = newGrid[row][column];\r\n        const newNode = {\r\n          ...node,\r\n          isEnd: false,\r\n        };\r\n        newGrid[row][column] = newNode;\r\n        this.setState({ grid: newGrid, isMovingEnd: true });\r\n      }\r\n    }\r\n  };\r\n\r\n  handleMouseEnter = (row, column) => {\r\n    if (!this.state.isMousePressed) return;\r\n  //  if (this.state.isMovingStart || this.state.isMovingEnd) return;\r\n    if (this.state.isMovingStart){\r\n      const newGrid=this.state.grid;\r\n      newGrid[startNode_Row][startNode_Col].isStart=false;\r\n      newGrid[row][column].isStart=true;\r\n      startNode_Row=row;\r\n      startNode_Col=column;\r\n      this.setState({grid:newGrid});\r\n    }\r\n    else if (this.state.isMovingEnd){\r\n      const newGrid=this.state.grid;\r\n      newGrid[endNode_Row][endNode_Col].isEnd=false;\r\n      newGrid[row][column].isEnd=true;\r\n      endNode_Row=row;\r\n      endNode_Col=column;\r\n      this.setState({grid:newGrid});\r\n    }\r\n    if (\r\n      !(\r\n        (row === startNode_Row && column === startNode_Col) ||\r\n        (row === endNode_Row && column === endNode_Col)\r\n      )\r\n    ) {\r\n      console.log(row, column, \"mouse enter\");\r\n      let newGrid;\r\n      if (!this.state.addWeights) {\r\n        newGrid = this.getNewGridWithWallToggled(row, column);\r\n      } else {\r\n        newGrid = this.getNewGridWithWeights(row, column);\r\n      }\r\n      this.setState({ grid: newGrid });\r\n    } else {\r\n      console.log(\"mouse entered starting or ending\");\r\n    }\r\n  };\r\n\r\n  handleMouseUp = (row, column) => {\r\n    if (this.state.processActive === true) {\r\n      return;\r\n    }\r\n    console.log(\"mouse up\");\r\n    this.setState({ isMousePressed: false });\r\n\r\n    //if moving start or end\r\n    if (this.state.isMovingStart === true) {\r\n      const newGrid = this.state.grid.slice();\r\n      const node = newGrid[row][column];\r\n      const newNode = {\r\n        ...node,\r\n        isWall: false,\r\n        isStart: true,\r\n      };\r\n      newGrid[row][column] = newNode;\r\n      this.setState({ grid: newGrid, isMovingStart: false });\r\n      startNode_Row = row;\r\n      startNode_Col = column;\r\n    } else if (this.state.isMovingEnd === true) {\r\n      const newGrid = this.state.grid.slice();\r\n      const node = newGrid[row][column];\r\n      const newNode = {\r\n        ...node,\r\n        isWall: false,\r\n        isEnd: true,\r\n      };\r\n      newGrid[row][column] = newNode;\r\n      this.setState({ grid: newGrid, isMovingEnd: false });\r\n      endNode_Row = row;\r\n      endNode_Col = column;\r\n    }\r\n  };\r\n\r\n  animateAlgo = (visitedNodesInOrder, shortestPath) => {\r\n    this.setState({ processActive: true });\r\n    document.getElementById(\"visualize\").disabled = true;\r\n    document.getElementById(\"clearAlgo\").disabled = true;\r\n    document.getElementById(\"clearGrid\").disabled = true;\r\n    for (let i = 1; i < visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length - 1) {\r\n        for (let j = 0; j < shortestPath.length; j++) {\r\n          setTimeout(() => {\r\n            setTimeout(() => {\r\n              const node = shortestPath[j];\r\n              if (\r\n                document.getElementById(`node-${node.row}-${node.column}`)\r\n                  .className === \"node weight-present-visited\"\r\n              ) {\r\n                document.getElementById(\r\n                  `node-${node.row}-${node.column}`\r\n                ).className = \"node weight-present-path\";\r\n              } else {\r\n                document.getElementById(\r\n                  `node-${node.row}-${node.column}`\r\n                ).className = \"node node-shortestPath\";\r\n              }\r\n            }, 50 * j);\r\n          }, 25 * i);\r\n        }\r\n        // Finally the solution to bug\r\n        setTimeout(() => {\r\n          setTimeout(() => {\r\n            console.log(\"ho gya\");\r\n            this.setState({ processActive: false });\r\n            document.getElementById(\"visualize\").disabled = false;\r\n            document.getElementById(\"clearAlgo\").disabled = false;\r\n            document.getElementById(\"clearGrid\").disabled = false;\r\n          }, 50 * shortestPath.length);\r\n        }, 25 * visitedNodesInOrder.length);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        if (\r\n          document.getElementById(`node-${node.row}-${node.column}`)\r\n            .className === \"node weight-present\"\r\n        ) {\r\n          document.getElementById(`node-${node.row}-${node.column}`).className =\r\n            \"node weight-present-visited\";\r\n        } else {\r\n          document.getElementById(`node-${node.row}-${node.column}`).className =\r\n            \"node node-visited\";\r\n        }\r\n      }, 25 * i);\r\n    }\r\n  };\r\n\r\n  visualizeDijkstra = () => {\r\n    // const toBeDisabled = document.getElementById(\"button\");\r\n    // toBeDisabled.disabled = true;\r\n    this.clearAlgo(); //for clearing grid for any previous algo if implemented\r\n    const { grid } = this.state;\r\n    const startNode = grid[startNode_Row][startNode_Col];\r\n    const endNode = grid[endNode_Row][endNode_Col];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, endNode);\r\n    //console.log(visitedNodesInOrder);\r\n    const shortestPath = getShortestPathDijkstra(grid, startNode, endNode);\r\n    //console.log(visitedNodesInOrder);\r\n    const shortestPathCost = getWeightOfShortestPathDijkstra(\r\n      grid,\r\n      shortestPath\r\n    );\r\n    this.animateAlgo(visitedNodesInOrder, shortestPath);\r\n    this.setState({\r\n      timeComplexity: visitedNodesInOrder.length,\r\n      pathLength: shortestPath.length,\r\n      pathCost: shortestPathCost,\r\n    });\r\n    // toBeDisabled.disabled = false;\r\n    // console.log(shortestPath);\r\n    // console.log(grid);\r\n  };\r\n\r\n  visualizeAstar = () => {\r\n    this.clearAlgo(); //for clearing grid for any previous algo if implemented\r\n    const { grid } = this.state;\r\n    const startNode = grid[startNode_Row][startNode_Col];\r\n    const endNode = grid[endNode_Row][endNode_Col];\r\n    const visitedNodesInOrder = aStar(grid, startNode, endNode);\r\n    //console.log(visitedNodesInOrder);\r\n    const shortestPath = getShortestPathAstar(grid, startNode, endNode);\r\n    console.log(visitedNodesInOrder);\r\n    const shortestPathCost = getWeightOfShortestPathAstar(grid, shortestPath);\r\n    this.animateAlgo(visitedNodesInOrder, shortestPath);\r\n    this.setState({\r\n      timeComplexity: visitedNodesInOrder.length,\r\n      pathLength: shortestPath.length,\r\n      pathCost: shortestPathCost,\r\n    });\r\n    // console.log(shortestPath);\r\n    // console.log(grid);\r\n  };\r\n\r\n  visualizeBFS = () => {\r\n    this.clearAlgo(); //for clearing grid for any previous algo if implemented\r\n    const { grid } = this.state;\r\n    const startNode = grid[startNode_Row][startNode_Col];\r\n    const endNode = grid[endNode_Row][endNode_Col];\r\n    const visitedNodesInOrder = bfs(grid, startNode, endNode);\r\n    //console.log(visitedNodesInOrder);\r\n    const path = getPathBFS(grid, startNode, endNode);\r\n    console.log(visitedNodesInOrder);\r\n    this.animateAlgo(visitedNodesInOrder, path);\r\n    const pathCost = getWeightOfShortestPathBFS(grid, path);\r\n    this.setState({\r\n      timeComplexity: visitedNodesInOrder.length,\r\n      pathLength: path.length,\r\n      pathCost,\r\n    });\r\n    console.log(path);\r\n    console.log(grid);\r\n  };\r\n\r\n  visualizeDFS = () => {\r\n    this.clearAlgo(); //for clearing grid for any previous algo if implemented\r\n    const { grid } = this.state;\r\n    const startNode = grid[startNode_Row][startNode_Col];\r\n    const endNode = grid[endNode_Row][endNode_Col];\r\n    const visitedNodesInOrder = dfs(grid, startNode, endNode);\r\n    console.log(visitedNodesInOrder);\r\n    const path = getPathDFS(grid, startNode, endNode);\r\n    console.log(visitedNodesInOrder);\r\n    this.animateAlgo(visitedNodesInOrder, path);\r\n    const pathCost = getWeightOfPathDFS(grid, path);\r\n    this.setState({\r\n      timeComplexity: visitedNodesInOrder.length,\r\n      pathLength: path.length,\r\n      pathCost,\r\n    });\r\n    console.log(path);\r\n    console.log(grid);\r\n  };\r\n\r\n  //clear visitedNodes and shortestPath properties from the grid leaving walls and weights untouched\r\n  clearAlgo = () => {\r\n    const newGrid = this.state.grid;\r\n    for (let row = 0; row < total_rows; row++) {\r\n      for (let column = 0; column < total_columns; column++) {\r\n        newGrid[row][column].distance = Infinity;\r\n        newGrid[row][column].isVisited = false;\r\n        newGrid[row][column].previousNode = null;\r\n        if (\r\n          !(\r\n            (row === startNode_Row && column === startNode_Col) ||\r\n            (row === endNode_Row && column === endNode_Col) ||\r\n            newGrid[row][column].isWall === true\r\n          )\r\n        ) {\r\n          if (newGrid[row][column].weight > 0) {\r\n            document.getElementById(`node-${row}-${column}`).className =\r\n              \"node weight-present\";\r\n          } else {\r\n            document.getElementById(`node-${row}-${column}`).className = \"node\";\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.setState({\r\n      grid: newGrid,\r\n      timeComplexity: 0,\r\n      pathLength: 0,\r\n      pathCost: 0,\r\n    });\r\n  };\r\n\r\n  //clear whole grid\r\n  undoAlgoAndWalls = () => {\r\n    const newGrid = this.state.grid;\r\n    for (let row = 0; row < total_rows; row++) {\r\n      for (let column = 0; column < total_columns; column++) {\r\n        newGrid[row][column].distance = Infinity;\r\n        newGrid[row][column].isVisited = false;\r\n        newGrid[row][column].previousNode = null;\r\n        newGrid[row][column].isWall = false;\r\n        newGrid[row][column].weight = 0;\r\n        if (\r\n          !(\r\n            (row === startNode_Row && column === startNode_Col) ||\r\n            (row === endNode_Row && column === endNode_Col)\r\n          )\r\n        ) {\r\n          document.getElementById(`node-${row}-${column}`).className = \"node\";\r\n        }\r\n      }\r\n    }\r\n    this.setState({\r\n      grid: newGrid,\r\n      timeComplexity: 0,\r\n      pathLength: 0,\r\n      pathCost: 0,\r\n    });\r\n  };\r\n\r\n  handleCheckboxChange = () => {\r\n    console.log(this.state.addWeights);\r\n    this.setState({ addWeights: !this.state.addWeights });\r\n    console.log(this.state.addWeights, \"hi\");\r\n  };\r\n\r\n  render() {\r\n    const { grid } = this.state;\r\n    //  console.log(grid);\r\n    return (\r\n      // <div className=\"container-fluid\">\r\n      <div>\r\n        <Navbar\r\n          addWeights={this.state.addWeights}\r\n          handleDijkstra={this.visualizeDijkstra}\r\n          handleAstar={this.visualizeAstar}\r\n          handleBFS={this.visualizeBFS}\r\n          handleDFS={this.visualizeDFS}\r\n          handleClearAlgorithm={this.clearAlgo}\r\n          handleClearGrid={this.undoAlgoAndWalls}\r\n          handleCheckboxChange={this.handleCheckboxChange}\r\n          processActive={this.state.processActive}\r\n        ></Navbar>\r\n        <div>\r\n          <span className=\"time\">\r\n            Time Complexity = {this.state.timeComplexity}\r\n          </span>\r\n          <span className=\"pathLength\">\r\n            Path Length = {this.state.pathLength}\r\n          </span>\r\n          <span className=\"pathCost\">Path Cost = {this.state.pathCost}</span>\r\n        </div>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {\r\n                    row,\r\n                    column,\r\n                    isStart,\r\n                    isEnd,\r\n                    distance,\r\n                    isVisited,\r\n                    previousNode,\r\n                    isWall,\r\n                    weight,\r\n                    isMousePressed,\r\n                  } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      row={row}\r\n                      column={column}\r\n                      isStart={isStart}\r\n                      isEnd={isEnd}\r\n                      distance={distance}\r\n                      isVisited={isVisited}\r\n                      previousNode={previousNode}\r\n                      isWall={isWall}\r\n                      weight={weight}\r\n                      isMousePressed={isMousePressed}\r\n                      onMouseDown={(row, column) =>\r\n                        this.handleMouseDown(row, column)\r\n                      }\r\n                      onMouseEnter={(row, column) =>\r\n                        this.handleMouseEnter(row, column)\r\n                      }\r\n                      onMouseUp={(row, column) =>\r\n                        this.handleMouseUp(row, column)\r\n                      }\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GraphAlgoVisualizer;\r\n","import React, { Component } from \"react\";\nimport GraphAlgoVisualizer from \"./graphAlgoVisualizer/graphAlgoVisualizer\";\n//import \"./App.css\";\n\nclass App extends Component {\n  state = {};\n  render() {\n    return (\n      //<div className=\"App-header\">\n      <div>\n        <GraphAlgoVisualizer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport ReactGA from \"react-ga\";\nReactGA.initialize(\"UA-179559461-1\");\nReactGA.pageview(window.location.pathname + window.location.search);\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}