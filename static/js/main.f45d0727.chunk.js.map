{"version":3,"sources":["topologicalSorting/FormInput.jsx","topologicalSorting/Network.js","graphAlgoVisualizer/node/node.jsx","graphAlgoVisualizer/navbar.jsx","algorithms/dijkstra.js","algorithms/aStar.js","algorithms/bfs.js","algorithms/dfs.js","graphAlgoVisualizer/graphAlgoVisualizer.jsx","minimumSpanningTree/canvas.jsx","minimumSpanningTree/minimumSpanningTree.js","Header.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["FormInput","props","tempdata","value1","value2","value3","value4","value1prereq","value2prereq","value3prereq","value4prereq","temptaskCounter","tempgraph","nodes","edges","tempanswer","state","data","taskCounter","graph","answer","open","createNetwork","bind","handlebuttonclick","topologicalSort","hasCycle","hasCycleUtil","computeInDegree","generateFormInput","visualizeNetwork","handleChange","handleSubmit","resetForm","this","i","formmanage","children","hidden","setState","e","preventDefault","target","disabled","parentElement","adjMap","inDegreeMap","Map","node","list","has","set","neighbour","get","visited","recStack","I","c","length","Array","q","key","push","curr","shift","neighbours","toString","Object","values","at","toLowerCase","trim","split","filter","str","dataSet","edgesArr","id","label","from","to","width","DataSet","event","eval","name","value","messagesEnd","scrollIntoView","behavior","console","log","className","style","backgroundColor","title","onClick","in","onSubmit","ref","em","type","placeholder","onChange","el","React","Component","VisNetwork","domNode","useRef","network","options","autoResize","locale","clickToUse","arrows","enabled","color","highlight","background","border","shape","font","useEffect","current","Network","Node","getClassName","isStart","isEnd","isWall","weight","visitedNode","pathNode","row","column","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","Checkbox","classNavbar","currentAlgo","addWeights","forDijkstra","handleDescription","forAstar","forBFS","forDFS","visualize","handleDijkstra","handleAstar","handleBFS","handleDFS","handleCheckboxChange","handleClearAlgorithm","handleClearGrid","timeComplexity","pathLength","pathCost","Navbar","variant","expand","sticky","Brand","Toggle","aria-controls","Collapse","Nav","NavDropdown","Item","Button","checked","dijkstra","grid","startNode","endNode","visitedNodeInOrder","distance","unvisitedNodes","columns","getAllNodes","sortNodesByDistance","nearestNode","isVisited","Infinity","updateUnvisitedNeighbours","sort","nodeA","nodeB","unvisitedNeighbours","getUnvisitedNeighbours","ite","previousNode","getShortestPathDijkstra","shortestPath","previous","reverse","getWeightOfShortestPathDijkstra","weightOfPath","aStar","visitedNodesInOrder","Math","abs","toReturn","rows","sortNodesByValueF","nextNode","currentNode","targetNode","distanceBetweenCurrentAndTarget","g_currentNode","g_ite","h_ite","getShortestPathAstar","getWeightOfShortestPathAstar","bfs","queue","currNode","pushNeighboursOfCurrentNode","neighboursOfCurrentNode","getNeighboursOfCurrentNode","getPathBFS","path","getWeightOfShortestPathBFS","dfs","stack","pop","pushNeighboursOfNode","neighboursOfNode","getNeighboursOfNode","getPathDFS","getWeightOfPathDFS","startNode_Row","startNode_Col","endNode_Row","endNode_Col","GraphAlgoVisualizer","isMousePressed","isMovingStart","isMovingEnd","processActive","description","getNewGridWithWallToggled","newGrid","slice","newNode","getNewGridWithWeights","changeInValue","handleMouseDown","handleMouseEnter","handleMouseUp","handleMouseLeave","animateAlgo","document","getElementById","j","setTimeout","newGridNode","visualizeDijkstra","clearAlgo","shortestPathCost","visualizeAstar","visualizeBFS","visualizeDFS","undoAlgoAndWalls","getDescription","algo","currentRow","map","rowIdx","nodeIdx","Canvas","coord","minimumCost","ctx","canvas","getContext","draw","cost","unvisited","unvisited1","total","first","splice","minEdge","parent","currentVertex","calWeight","round","totalCount","drawPrims","setCost","x1","y1","x2","y2","x","pow","y","sqrt","outline","window","innerWidth","height","innerHeight","display","fontSize","position","right","newCanvas","xypair","clientX","clientY","newCoord","prims","onContextMenu","coordX","coordY","MinimumSpanningTree","ChildElement","createRef","strokeRect","rect","getBoundingClientRect","clearRect","fillStyle","beginPath","arc","left","top","PI","fill","data1","source","destination","strokeStyle","moveTo","lineTo","stroke","strokeText","Header","justify","defaultActiveKey","Link","href","eventKey","Footer","rel","App","exact","element","Boolean","location","hostname","match","ReactGA","initialize","pageview","pathname","search","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f45d0727.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Button,Collapse } from \"react-bootstrap\";\r\nimport { DataSet } from \"vis-data\";\r\nimport \"./form.css\"\r\nimport Network from './Network';\r\n\r\n\r\nclass FormInput extends React.Component {\r\n  tempdata= {\r\n    value1: '', value2: '', value3: '', value4: '',\r\n    value1prereq: '', value2prereq: '', value3prereq: '', value4prereq: ''\r\n  };\r\n  temptaskCounter= 1;\r\n  tempgraph= {\r\n    nodes: [],\r\n    edges: []\r\n  };\r\n  tempanswer= '';\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: {\r\n        value1: '', value2: '', value3: '', value4: '',\r\n        value1prereq: '', value2prereq: '', value3prereq: '', value4prereq: ''\r\n      }\r\n      , taskCounter: 1\r\n      , graph: {\r\n        nodes: [],\r\n        edges: []\r\n      },\r\n      answer: '',\r\n      open:false\r\n    };\r\n    this.createNetwork = this.createNetwork.bind(this);\r\n    this.handlebuttonclick = this.handlebuttonclick.bind(this);\r\n    this.topologicalSort = this.topologicalSort.bind(this);\r\n    this.hasCycle = this.hasCycle.bind(this);\r\n    this.hasCycleUtil = this.hasCycle.bind(this);\r\n    this.computeInDegree = this.computeInDegree.bind(this);\r\n    this.generateFormInput = this.generateFormInput.bind(this);\r\n    this.visualizeNetwork = this.visualizeNetwork.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.resetForm = this.resetForm.bind(this);\r\n  }\r\n  \r\n  resetForm() {\r\n    this.temptaskCounter=1;\r\n    for (let i = 1; i < 4; i++) {\r\n      this.formmanage.children[i].hidden = true;\r\n\r\n    }\r\n  }\r\n  handlebuttonclick()\r\n  {\r\n    this.setState({open:!this.state.open});\r\n  }\r\n  generateFormInput(e) {\r\n    e.preventDefault();\r\n    this.temptaskCounter+=1;\r\n    if (this.temptaskCounter === 4) {\r\n      e.target.disabled = true;\r\n    }\r\n    e.target.parentElement.children[this.temptaskCounter - 1].hidden = false;\r\n  }\r\n  computeInDegree(adjMap) {\r\n    let inDegreeMap = new Map();\r\n    for (let [node, list] of adjMap) {\r\n      if (!inDegreeMap.has(node)) {\r\n        inDegreeMap.set(node, 0);\r\n      }\r\n      for (let neighbour of list) {\r\n        if (inDegreeMap.has(neighbour)) {\r\n          inDegreeMap.set(neighbour, inDegreeMap.get(neighbour) + 1);\r\n        } else {\r\n          inDegreeMap.set(neighbour, 1);\r\n        }\r\n      }\r\n    }\r\n    return inDegreeMap;\r\n  }\r\n\r\n  hasCycleUtil(i, visited, recStack, adjMap, I) {\r\n    // Mark the current node as visited and\r\n    // part of recursion stack\r\n    if (recStack[i])\r\n      return true;\r\n\r\n    if (visited[i])\r\n      return false;\r\n\r\n    visited[i] = true;\r\n\r\n    recStack[i] = true;\r\n    let children = adjMap[i];\r\n\r\n    for (let c = 0; c < children.length; c++)\r\n      if (this.hasCycleUtil(children, visited, recStack, adjMap))\r\n        return true;\r\n\r\n    recStack[i] = false;\r\n\r\n    return false;\r\n  }\r\n\r\n  hasCycle(adjMap) {\r\n    let visited = new Array(this.temptaskCounter);\r\n    let recStack = new Array(this.temptaskCounter);\r\n    for (let i = 0; i < this.temptaskCounter; i++) {\r\n      visited[i] = false;\r\n      recStack[i] = false;\r\n    }\r\n\r\n    for (let i = 0; i < this.temptaskCounter; i++)\r\n      if (this.hasCycleUtil(i, visited, recStack, adjMap, i % 2))\r\n        return true;\r\n\r\n    return false;\r\n  }\r\n  topologicalSort(adjMap, inDegreeMap) {\r\n    // if(this.hasCycle(adjMap)){\r\n    //   console.log(\"reached\");\r\n    //   alert('Submitted Can\\'t Sort - Given Graph contains cycle');\r\n    // }\r\n    let q = [];\r\n    for (let [key, value] of inDegreeMap) {\r\n      if (value === 0) {\r\n        q.push(key);\r\n      }\r\n    }\r\n    let answer = [];\r\n    while (q.length) {\r\n      let curr = q.shift();\r\n      answer.push(curr);\r\n      let neighbours = adjMap.get(curr);\r\n      for (let i = 0; i < neighbours.length; ++i) {\r\n        inDegreeMap.set(neighbours[i], inDegreeMap.get(neighbours[i]) - 1);\r\n        if (inDegreeMap.get(neighbours[i]) === 0) {\r\n          q.push(neighbours[i]);\r\n        }\r\n      }\r\n    }\r\n    if (answer.length < this.temptaskCounter) {\r\n\r\n      this.tempanswer=\"Topological Sort is not possible since given graph has cycle\";\r\n    }\r\n    else {\r\n       this.tempanswer=\"Order Of Execution = \" + answer.toString();\r\n    }\r\n  }\r\n  visualizeNetwork() {\r\n    const data = this.tempdata;\r\n    let adjMap = new Map();\r\n    for (let i = 0; i < this.temptaskCounter; i++) {\r\n      let key = Object.values(data).at(i).toLowerCase().trim();\r\n      if (!key) {\r\n        continue;\r\n      }\r\n      let values = Object.values(data).at(i + 4).split(',');\r\n      values = values.filter(str => str.trim().length > 0);\r\n      for (let i = 0; i < values.length; ++i) {\r\n        values[i] = values[i].toLowerCase().trim();\r\n        if (!adjMap.has(values[i])) {\r\n          adjMap.set(values[i], [key]);\r\n        } else {\r\n          adjMap.get(values[i]).push(key);\r\n        }\r\n      }\r\n\r\n      if (key && !adjMap.has(key)) {\r\n        adjMap.set(key, []);\r\n      }\r\n    }\r\n    this.createNetwork(adjMap);\r\n    this.topologicalSort(adjMap, this.computeInDegree(adjMap));\r\n\r\n  }\r\n  createNetwork(adjMap){\r\n    let dataSet = [];\r\n    let edgesArr = [];\r\n    for(let [key,values] of adjMap){\r\n      dataSet.push({id: key, label: key});\r\n      for(let i = 0 ; i < values.length ; ++i){\r\n        edgesArr.push({from: key, to: values[i], width: 1});\r\n      }\r\n    }\r\n    let network = new DataSet(dataSet);\r\n    let edges = new DataSet(edgesArr);\r\n    let data = {\r\n      nodes: network,\r\n      edges: edges\r\n    };\r\n    this.tempgraph=data;\r\n  }\r\n\r\n  handleChange(event) {\r\n    eval('this.tempdata.' + event.target.name + '=\"' + event.target.value + '\";');\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    if (this.temptaskCounter >= 1 && this.tempdata.value1 !== \"\") {\r\n      event.target.parentElement.children[4].hidden = false;\r\n    }\r\n\r\n    this.visualizeNetwork();\r\n    this.setState({\r\n      data: this.tempdata\r\n      , taskCounter: this.temptaskCounter\r\n      , graph: this.tempgraph,\r\n      answer: this.tempanswer,\r\n    })\r\n    this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\r\n    console.log(this.state.answer);\r\n    // this.resetForm();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\" pt-2 pb-2 text-light container-float\" style={{backgroundColor: \"#262626\"}}>\r\n          <div className=\"navbar-brand ml-4 \">\r\n              Topological Sorting\r\n          </div>\r\n        </div>\r\n\r\n        <div id=\"topological-helper\" className=\"mt-2\" >\r\n          <p className=\"lead\">Task Scheduling can be done via <em>Topological Sorting</em>.</p>\r\n          <p className=\"text-muted\">Topological Sorting is applicable only on <abbr title=\"Directed Acyclic Graphs\">DAGs</abbr>.</p>\r\n          <p className=\"text-muted\">Here we are visualizing <em>Topological Sorting</em> by <b>Kahn's Algorithm</b> using List of tasks below</p>\r\n        \r\n           <Button className=\"btn m-2\" onClick={this.handlebuttonclick}>\r\n               Topological Sorting\r\n           </Button>\r\n\r\n           <Collapse in={this.state.open} className=\"m-4\">\r\n               <blockquote>\r\n               <p>In computer science, a topological sort or topological ordering of a directed graph is\r\n                         a linear ordering of its vertices such that for every directed edge uv from vertex u to vertex v, u\r\n                        comes before v in the ordering.\r\n                        For instance, the vertices of the graph may represent tasks to be performed,\r\n                         and the edges may represent constraints that one task must be performed before\r\n                         another; in this application, a topological ordering is just a valid sequence\r\n                         for the tasks. A topological ordering is possible if and only if the graph has\r\n                         no directed cycles, that is, if it is a directed acyclic graph (DAG)\r\n                       </p>\r\n               </blockquote>\r\n           </Collapse>\r\n        </div>\r\n        \r\n\r\n          <div className=\"m-2\">\r\n            <b>Enter Tasks Data:</b>\r\n          </div>\r\n\r\n          <form onSubmit={this.handleSubmit} ref={(em) => { this.formmanage = em; }}>\r\n\r\n            <div>\r\n              <input type=\"text\" name=\"value1\" placeholder=\"Task 1\"onChange={this.handleChange} className=\"m-2 input-field\" />\r\n              <input type=\"text\" name=\"value1prereq\"placeholder=\"Task1 - Prerequisite\" onChange={this.handleChange} className=\"m-2 input-field\" />\r\n            </div>\r\n\r\n            <div hidden={true}>\r\n              <input type=\"text\" name=\"value2\"placeholder=\"Task 2\" onChange={this.handleChange} className=\"m-2 input-field\" />\r\n              <input type=\"text\" name=\"value2prereq\" placeholder=\"Task2 - Prerequisite\"onChange={this.handleChange} className=\"m-2 input-field\" />\r\n            </div>\r\n\r\n            <div hidden={true}>\r\n              <input type=\"text\" name=\"value3\" placeholder=\"Task 3\"onChange={this.handleChange} className=\"m-2 input-field\" />\r\n              <input type=\"text\" name=\"value3prereq\" placeholder=\"Task3 - Prerequisite\"onChange={this.handleChange} className=\"m-2 input-field\" />\r\n            </div> \r\n\r\n            <div hidden={true}>\r\n              <input type=\"text\" name=\"value4\" placeholder=\"Task 4\"onChange={this.handleChange} className=\"m-2 input-field\" />\r\n              <input type=\"text\" name=\"value4prereq\"placeholder=\"Task4 - Prerequisite\" onChange={this.handleChange} className=\"m-2 input-field\" />\r\n            </div>\r\n            <input type=\"button\" value=\"Add More\" onClick={this.generateFormInput} className=\"mt-2 ml-2 mr-1 button\" />\r\n            <input type=\"submit\" value=\"Visualize\" className=\"mt-2 mr-2 ml-1 button\" />\r\n\r\n          </form>\r\n          <div className=\"result\" hidden={false} ref={(el) => { this.messagesEnd = el; }} >\r\n            {this.state.answer}\r\n\r\n          </div>\r\n          <div className=\"vis-react m-1\" >\r\n            <Network value1={this.state.graph} />\r\n          </div>\r\n\r\n        </>\r\n        );\r\n  }\r\n}\r\nexport default FormInput;","import React, { useEffect, useRef } from \"react\";\r\nimport { Network } from \"vis-network/standalone/esm/vis-network\";\r\n\r\nconst VisNetwork = (props) => {\r\n  const domNode = useRef(null);\r\n\r\n  const network = useRef(null);\r\n\r\n  const options = {\r\n    autoResize: true,\r\n    locale: \"en\",\r\n    clickToUse: false,\r\n    edges: {\r\n      arrows: {\r\n        to: {\r\n          enabled: true,\r\n        },\r\n      },\r\n      color: {\r\n        color: \"#1168d9\",\r\n        highlight: \"#051d38\",\r\n      },\r\n    },\r\n    nodes: {\r\n      color: {\r\n        background: \"#1e2431\",\r\n        border: \"#1e2431\",\r\n        highlight: {\r\n          background: \"#1e2431\",\r\n          border: \"#1e2431\",\r\n        },\r\n      },\r\n      shape: \"circle\",\r\n      font: {\r\n        color: \"#cfddef\",\r\n      },\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    network.current = new Network(domNode.current, props.value1, options);\r\n  }, [domNode, network, props.value1, options]);\r\n\r\n  return <div className=\"mainDiv\" ref={domNode} />;\r\n};\r\n\r\nexport default VisNetwork;\r\n","import React, { Component } from \"react\";\r\nimport \"./node.css\";\r\n\r\nclass Node extends Component {\r\n  state = {};\r\n  getClassName = () => {\r\n    let str = \"node\";\r\n    if (this.props.isStart === true) {\r\n      str = str + \" startNode\";\r\n    } else if (this.props.isEnd === true) {\r\n      str = str + \" endNode\";\r\n    } else if (this.props.isWall === true) {\r\n      str = str + \" wall-true\";\r\n    } else if (this.props.weight > 0) {\r\n      str = str + \" weight-present\";\r\n    }\r\n    if (this.props.visitedNode === true){\r\n      str = str + \" node-visited\";\r\n    }\r\n    if (this.props.pathNode === true){\r\n      str = str + \" node-shortestPath\";\r\n    }\r\n    if (this.props.pathNode === true && this.props.weight > 0){\r\n      str = \"node weight-present-path\";\r\n    }\r\n    else if (this.props.visitedNode === true && this.props.weight > 0){\r\n      str = \"node weight-present-visited\";\r\n    }\r\n    return str; \r\n  };\r\n\r\n  render() {\r\n    const {\r\n      row,\r\n      column,\r\n      // isStart,\r\n      // isEnd,\r\n      // distance,\r\n      // isVisited,\r\n      // previousNode,\r\n      // isWall,\r\n      // weight,\r\n      onMouseDown,\r\n      onMouseUp,\r\n      onMouseEnter,\r\n      onMouseLeave,\r\n    } = this.props;\r\n    //console.log(  this.props);\r\n    return (\r\n      <div\r\n        className={this.getClassName()}\r\n        id={`node-${row}-${column}`}\r\n        onMouseDown={() => onMouseDown(row, column)}\r\n        onMouseEnter={() => onMouseEnter(row, column)}\r\n        onMouseUp={() => onMouseUp(row, column)}\r\n        onMouseLeave={() => onMouseLeave(row,column)}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Node;\r\n","import React, { Component } from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport \"./graphAlgoVisualizer.css\";\r\n\r\nconst Checkbox = (props) => <input type=\"checkbox\" {...props} />;\r\n\r\nclass classNavbar extends Component {\r\n  state = {\r\n    currentAlgo: \"Choose Algorithm\",\r\n    addWeights: \"false\",\r\n  };\r\n  forDijkstra = () => {\r\n    this.setState({ currentAlgo: \"Dijkstra\" });\r\n    this.props.handleDescription(\"Dijkstra\");\r\n  };\r\n  forAstar = () => {\r\n    this.setState({ currentAlgo: \"A* Search\" });\r\n    this.props.handleDescription(\"Astar\");\r\n  };\r\n  forBFS = () => {\r\n    this.setState({ currentAlgo: \"Breadth First Search\" });\r\n    this.props.handleDescription(\"BFS\");\r\n  };\r\n  forDFS = () => {\r\n    this.setState({ currentAlgo: \"Depth First Search\" });\r\n    this.props.handleDescription(\"DFS\");\r\n  };\r\n  visualize = () => {\r\n    if (this.state.currentAlgo === \"Dijkstra\") {\r\n      this.props.handleDijkstra();\r\n    } else if (this.state.currentAlgo === \"A* Search\") {\r\n      this.props.handleAstar();\r\n    } else if (this.state.currentAlgo === \"Breadth First Search\") {\r\n      this.props.handleBFS();\r\n    } else if (this.state.currentAlgo === \"Depth First Search\") {\r\n      this.props.handleDFS();\r\n    }\r\n  };\r\n  handleCheckboxChange = () => {\r\n    console.log(this.state.addWeights);\r\n    this.setState({ addWeights: !this.state.addWeights });\r\n  };\r\n  render() {\r\n    const {\r\n      handleClearAlgorithm,\r\n      handleClearGrid,\r\n      addWeights,\r\n      handleCheckboxChange,\r\n      timeComplexity,\r\n      pathLength,\r\n      pathCost,\r\n    } = this.props;\r\n    return (\r\n      <Navbar variant=\"dark\" expand=\"lg\" sticky=\"top\" style={{backgroundColor: \"#262626\"}}>\r\n        <Navbar.Brand className=\"mr-4\">Path Finding Visualizer</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <NavDropdown title={this.state.currentAlgo} id=\"basic-nav-dropdown\">\r\n              <NavDropdown.Item onClick={this.forDijkstra}>\r\n                Dijkstra\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item onClick={this.forAstar}>\r\n                A* Search\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item onClick={this.forBFS}>\r\n                Breadth First Search\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item onClick={this.forDFS}>\r\n                Depth First Search\r\n              </NavDropdown.Item>\r\n            </NavDropdown>\r\n            <Button\r\n              variant=\"success\"\r\n              className=\"mx-4\"\r\n              onClick={this.visualize}\r\n              id=\"visualize\"\r\n            >\r\n              Visualize!\r\n            </Button>\r\n            <Button\r\n              variant=\"info\"\r\n              className=\"mx-4\"\r\n              id=\"clearAlgo\"\r\n              onClick={handleClearAlgorithm}\r\n            >\r\n              Clear Algorithm\r\n            </Button>\r\n            <Button\r\n              variant=\"info\"\r\n              className=\"mx-4\"\r\n              onClick={handleClearGrid}\r\n              id=\"clearGrid\"\r\n            >\r\n              Clear Grid\r\n            </Button>\r\n            <label className=\"mx-3\">\r\n              <Checkbox checked={addWeights} onChange={handleCheckboxChange} />\r\n              <span className=\"checkBox\">Switch to Weights</span>\r\n            </label>\r\n            <label className=\"checkBox mx-3\">Path Length : {pathLength}</label>\r\n            <label className=\"checkBox mx-3\">Path Cost : {pathCost}</label>\r\n            <label className=\"checkBox mx-3\">Time Complexity : {timeComplexity}</label>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default classNavbar;\r\n","export function dijkstra(grid, startNode, endNode) {\r\n  const visitedNodeInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  // console.log(unvisitedNodes);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const nearestNode = unvisitedNodes.shift();\r\n    nearestNode.isVisited = true;\r\n    if (nearestNode.distance === Infinity) {\r\n      return visitedNodeInOrder;\r\n    }\r\n    if (nearestNode.isWall === true) {\r\n      continue;\r\n    }\r\n    // nearestNode.isVisited = true;\r\n    visitedNodeInOrder.push(nearestNode);\r\n    if (nearestNode === endNode) {\r\n      return visitedNodeInOrder;\r\n    }\r\n    updateUnvisitedNeighbours(nearestNode, grid);\r\n    // console.log(visitedNodeInOrder);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbours(node, grid) {\r\n  const unvisitedNeighbours = getUnvisitedNeighbours(node, grid);\r\n  for (let ite of unvisitedNeighbours) {\r\n    if (ite.distance > node.distance + ite.weight) {\r\n      ite.distance = node.distance + ite.weight + 1;\r\n      ite.previousNode = node;\r\n    }\r\n  }\r\n  return unvisitedNeighbours;\r\n}\r\n\r\nfunction getUnvisitedNeighbours(node, grid) {\r\n  const unvisitedNeighbours = [];\r\n  const { row, column } = node;\r\n  if (row - 1 >= 0 && grid[row - 1][column].isVisited !== true)\r\n    unvisitedNeighbours.push(grid[row - 1][column]);\r\n\r\n  if (row + 1 < grid.length && grid[row + 1][column].isVisited !== true)\r\n    unvisitedNeighbours.push(grid[row + 1][column]);\r\n\r\n  if (column - 1 >= 0 && grid[row][column - 1].isVisited !== true)\r\n    unvisitedNeighbours.push(grid[row][column - 1]);\r\n\r\n  if (column + 1 < grid[0].length && grid[row][column + 1].isVisited !== true)\r\n    unvisitedNeighbours.push(grid[row][column + 1]);\r\n\r\n  return unvisitedNeighbours;\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  let nodes = [];\r\n  for (let row of grid) {\r\n    for (let columns of row) {\r\n      nodes.push(columns);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nexport function getShortestPathDijkstra(grid, startNode, endNode) {\r\n  const shortestPath = [];\r\n  let previous = endNode.previousNode;\r\n  if (previous === null) {\r\n    return shortestPath;\r\n  }\r\n  while (previous !== startNode) {\r\n    shortestPath.push(previous);\r\n    previous = previous.previousNode;\r\n  }\r\n  shortestPath.reverse();\r\n  return shortestPath;\r\n}\r\n\r\nexport function getWeightOfShortestPathDijkstra(grid, shortestPath) {\r\n  let weightOfPath = 0;\r\n  for (let ite of shortestPath) {\r\n    if (ite.weight === 0) {\r\n      weightOfPath = weightOfPath + 1;\r\n    } else {\r\n      weightOfPath = weightOfPath + ite.weight + 1;\r\n    }\r\n  }\r\n  return weightOfPath;\r\n}\r\n","//here distance is f in a* algo\r\n//f=g+h\r\nexport function aStar(grid, startNode, endNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance =\r\n    Math.abs(startNode.row - endNode.row) +\r\n    Math.abs(startNode.column - endNode.column);\r\n  // startNode.distance=0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByValueF(unvisitedNodes);\r\n    const nextNode = unvisitedNodes.shift();\r\n    if (nextNode.distance === Infinity) {\r\n      return visitedNodesInOrder;\r\n    }\r\n    if (nextNode.isWall) {\r\n      continue;\r\n    }\r\n    nextNode.isVisited = true;\r\n    visitedNodesInOrder.push(nextNode);\r\n    if (nextNode === endNode) {\r\n      return visitedNodesInOrder;\r\n    }\r\n    updateUnvisitedNeighbours(nextNode, endNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByValueF(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const toReturn = [];\r\n  for (let rows of grid) {\r\n    for (let columns of rows) {\r\n      toReturn.push(columns);\r\n    }\r\n  }\r\n  return toReturn;\r\n}\r\n\r\nfunction updateUnvisitedNeighbours(currentNode, targetNode, grid) {\r\n  const unvisitedNeighbours = getUnvisitedNeighbours(currentNode, grid);\r\n  const distanceBetweenCurrentAndTarget =\r\n    Math.abs(currentNode.row - targetNode.row) +\r\n    Math.abs(currentNode.column - targetNode.column);\r\n  const g_currentNode = currentNode.distance - distanceBetweenCurrentAndTarget;\r\n  for (let ite of unvisitedNeighbours) {\r\n    let g_ite = g_currentNode + ite.weight + 1;\r\n    let h_ite =\r\n      Math.abs(ite.row - targetNode.row) +\r\n      Math.abs(ite.column - targetNode.column);\r\n    if (ite.distance > g_ite + h_ite) {\r\n      ite.distance = g_ite + h_ite;\r\n      ite.previousNode = currentNode;\r\n    }\r\n  }\r\n  return unvisitedNeighbours;\r\n}\r\n\r\n// function updateUnvisitedNeighbours(currentNode, targetNode, grid) {\r\n//   const unvisitedNeighbours = getUnvisitedNeighbours(currentNode, grid);\r\n//   const distanceBetweenCurrentAndTarget =\r\n//     currentNode.distance -\r\n//     (Math.abs(currentNode.row - targetNode.row) +\r\n//       Math.abs(currentNode.column - targetNode.column));\r\n//   // const distanceBetweenCurrentAndTarget = currentNode.distance;\r\n//   for (let ite of unvisitedNeighbours) {\r\n//     if (\r\n//       ite.distance >\r\n//       distanceBetweenCurrentAndTarget +\r\n//         ite.weight +\r\n//         Math.abs(ite.row - targetNode.row) +\r\n//         Math.abs(ite.column - targetNode.column)\r\n//     ) {\r\n//       ite.distance =\r\n//         distanceBetweenCurrentAndTarget +\r\n//         ite.weight +\r\n//         Math.abs(ite.row - targetNode.row) +\r\n//         Math.abs(ite.column - targetNode.column);\r\n//       ite.previousNode = currentNode;\r\n//     }\r\n//   }\r\n//   return unvisitedNeighbours;\r\n// }\r\n\r\nfunction getUnvisitedNeighbours(currentNode, grid) {\r\n  const unvisitedNeighbours = [];\r\n  const { row, column } = currentNode;\r\n  if (row - 1 >= 0 && grid[row - 1][column].isVisited !== true)\r\n    unvisitedNeighbours.push(grid[row - 1][column]);\r\n\r\n  if (row + 1 < grid.length && grid[row + 1][column].isVisited !== true)\r\n    unvisitedNeighbours.push(grid[row + 1][column]);\r\n\r\n  if (column - 1 >= 0 && grid[row][column - 1].isVisited !== true)\r\n    unvisitedNeighbours.push(grid[row][column - 1]);\r\n\r\n  if (column + 1 < grid[0].length && grid[row][column + 1].isVisited !== true)\r\n    unvisitedNeighbours.push(grid[row][column + 1]);\r\n\r\n  return unvisitedNeighbours;\r\n}\r\n\r\nexport function getShortestPathAstar(grid, startNode, endNode) {\r\n  const shortestPath = [];\r\n  let previous = endNode.previousNode;\r\n  if (previous === null) {\r\n    return shortestPath;\r\n  }\r\n  while (previous !== startNode) {\r\n    shortestPath.push(previous);\r\n    previous = previous.previousNode;\r\n  }\r\n  shortestPath.reverse();\r\n  return shortestPath;\r\n}\r\n\r\nexport function getWeightOfShortestPathAstar(grid, shortestPath) {\r\n  let weightOfPath = 0;\r\n  for (let ite of shortestPath) {\r\n    if (ite.weight === 0) {\r\n      weightOfPath = weightOfPath + 1;\r\n    } else {\r\n      weightOfPath = weightOfPath + ite.weight + 1;\r\n    }\r\n  }\r\n  return weightOfPath;\r\n}\r\n","export function bfs(grid, startNode, endNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.isVisited = true;\r\n  //    const unvisitedNodes=extractAllNodes(grid);\r\n  const queue = [];\r\n  queue.push(startNode);\r\n  while (!!queue.length) {\r\n    const currNode = queue.shift();\r\n    if (currNode === endNode) {\r\n      return visitedNodesInOrder;\r\n    }\r\n    if (currNode.isWall) {\r\n      continue;\r\n    }\r\n    visitedNodesInOrder.push(currNode);\r\n    pushNeighboursOfCurrentNode(grid, queue, currNode);\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction pushNeighboursOfCurrentNode(grid, queue, currNode) {\r\n  const neighboursOfCurrentNode = getNeighboursOfCurrentNode(grid, currNode);\r\n  for (let node of neighboursOfCurrentNode) {\r\n    node.isVisited = true;\r\n    node.previousNode = currNode;\r\n    queue.push(node);\r\n  }\r\n}\r\n\r\nfunction getNeighboursOfCurrentNode(grid, currNode) {\r\n  const toReturn = [];\r\n  const row = currNode.row;\r\n  const column = currNode.column;\r\n\r\n  if (row - 1 >= 0 && !grid[row - 1][column].isVisited)\r\n    toReturn.push(grid[row - 1][column]);\r\n\r\n  if (column - 1 >= 0 && !grid[row][column - 1].isVisited)\r\n    toReturn.push(grid[row][column - 1]);\r\n\r\n  if (row + 1 < grid.length && !grid[row + 1][column].isVisited)\r\n    toReturn.push(grid[row + 1][column]);\r\n\r\n  if (column + 1 < grid[0].length && !grid[row][column + 1].isVisited)\r\n    toReturn.push(grid[row][column + 1]);\r\n\r\n  return toReturn;\r\n}\r\n\r\n// function extractAllNodes(grid){\r\n//     const toReturn=[];\r\n//     for (let row of grid){\r\n//         for (let column of row){\r\n//             toReturn.push(column);\r\n//         }\r\n//     }\r\n//     return toReturn;\r\n// }\r\n\r\nexport function getPathBFS(grid, startNode, endNode) {\r\n  const path = [];\r\n  let previous = endNode.previousNode;\r\n  if (previous === null) {\r\n    return path;\r\n  }\r\n  while (previous !== startNode) {\r\n    path.push(previous);\r\n    previous = previous.previousNode;\r\n  }\r\n  path.reverse();\r\n  return path;\r\n}\r\n\r\nexport function getWeightOfShortestPathBFS(grid, path) {\r\n  let weightOfPath = 0;\r\n  for (let ite of path) {\r\n    if (ite.weight === 0) {\r\n      weightOfPath = weightOfPath + 1;\r\n    } else {\r\n      weightOfPath = weightOfPath + ite.weight + 1;\r\n    }\r\n  }\r\n  return weightOfPath;\r\n}\r\n","export function dfs(grid, startNode, endNode) {\r\n  const visitedNodesInOrder = [];\r\n  const stack = [];\r\n  startNode.isVisited = true;\r\n  stack.push(startNode);\r\n  while (!!stack.length) {\r\n    const nextNode = stack.pop();\r\n    if (nextNode.isWall === true) {\r\n      continue;\r\n    }\r\n    visitedNodesInOrder.push(nextNode);\r\n    if (nextNode === endNode) {\r\n      return visitedNodesInOrder;\r\n    }\r\n    pushNeighboursOfNode(grid, stack, nextNode);\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction pushNeighboursOfNode(grid, stack, node) {\r\n  const neighboursOfNode = getNeighboursOfNode(grid, node);\r\n  for (let ite of neighboursOfNode) {\r\n    if (ite.previousNode===null){\r\n      ite.previousNode = node;\r\n    }\r\n    ite.isVisited = true;\r\n    stack.push(ite);\r\n  }\r\n}\r\n\r\nfunction getNeighboursOfNode(grid, node) {\r\n  const unvisitedNeighbours = [];\r\n  const row = node.row;\r\n  const column = node.column;\r\n\r\n  if (row - 1 >= 0 && grid[row - 1][column].isVisited === false) {\r\n    unvisitedNeighbours.push(grid[row - 1][column]);\r\n  }\r\n  if (column - 1 >= 0 && grid[row][column - 1].isVisited === false) {\r\n    unvisitedNeighbours.push(grid[row][column - 1]);\r\n  }\r\n  if (row + 1 < grid.length && grid[row + 1][column].isVisited === false) {\r\n    unvisitedNeighbours.push(grid[row + 1][column]);\r\n  }\r\n  if (\r\n    column + 1 < grid[0].length &&\r\n    grid[row][column + 1].isVisited === false\r\n  ) {\r\n    unvisitedNeighbours.push(grid[row][column + 1]);\r\n  }\r\n\r\n  return unvisitedNeighbours;\r\n}\r\n\r\nexport function getPathDFS(grid, startNode, endNode) {\r\n  const path = [];\r\n  let previous = endNode.previousNode;\r\n  if (previous === null) {\r\n    return path;\r\n  }\r\n  while (previous !== startNode) {\r\n    path.push(previous);\r\n    previous = previous.previousNode;\r\n  }\r\n  path.reverse();\r\n  return path;\r\n}\r\n\r\nexport function getWeightOfPathDFS(grid, path) {\r\n  let weightOfPath = 0;\r\n  for (let ite of path) {\r\n    if (ite.weight === 0) {\r\n      weightOfPath = weightOfPath + 1;\r\n    } else {\r\n      weightOfPath = weightOfPath + ite.weight + 1;\r\n    }\r\n  }\r\n  return weightOfPath;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./node/node.jsx\";\r\nimport Navbar from \"./navbar\";\r\nimport \"./graphAlgoVisualizer.css\";\r\nimport {\r\n  dijkstra,\r\n  getShortestPathDijkstra,\r\n  getWeightOfShortestPathDijkstra,\r\n} from \"../algorithms/dijkstra.js\";\r\nimport {\r\n  aStar,\r\n  getShortestPathAstar,\r\n  getWeightOfShortestPathAstar,\r\n} from \"../algorithms/aStar.js\";\r\nimport {\r\n  bfs,\r\n  getPathBFS,\r\n  getWeightOfShortestPathBFS,\r\n} from \"../algorithms/bfs.js\";\r\nimport { dfs, getPathDFS, getWeightOfPathDFS } from \"../algorithms/dfs\";\r\nimport \"./node/node.css\";\r\n\r\nconst total_rows = 18;\r\nconst total_columns = 45;\r\nvar startNode_Row = 5;\r\nvar startNode_Col = 10;\r\nvar endNode_Row = 10;\r\nvar endNode_Col = 37;\r\nconst FixedWeight = 10;\r\n\r\nclass GraphAlgoVisualizer extends Component {\r\n  state = {\r\n    grid: [],\r\n    isMousePressed: false,\r\n    timeComplexity: 0,\r\n    pathCost: 0,\r\n    pathLength: 0,\r\n    isMovingStart: false,\r\n    isMovingEnd: false,\r\n    addWeights: false,\r\n    processActive: false,\r\n    description: \"Selecting the Nodes in the grid creates Obstacles/Weights. To switch from Obstacles to Weight and vice versa, use the checkbox at Navbar and select an Algorithm\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    const grid = [];\r\n    for (let row = 0; row < total_rows; row++) {\r\n      const currentRow = [];\r\n      for (let column = 0; column < total_columns; column++) {\r\n        const currentNode = {\r\n          row,\r\n          column,\r\n          isStart: row === startNode_Row && column === startNode_Col,\r\n          isEnd: row === endNode_Row && column === endNode_Col,\r\n          distance: Infinity,\r\n          weight: 0,\r\n          isVisited: false,\r\n          previousNode: null,\r\n          isWall: false,\r\n          visitedNode: false,\r\n          pathNode: false,\r\n        };\r\n        currentRow.push(currentNode);\r\n      }\r\n      grid.push(currentRow);\r\n    }\r\n    this.setState({ grid });\r\n  }\r\n\r\n  getNewGridWithWallToggled = (row, column) => {\r\n    const newGrid = this.state.grid.slice();\r\n    const node = newGrid[row][column];\r\n    const newNode = {\r\n      ...node,\r\n      isWall: !node.isWall,\r\n      weight: 0,\r\n    };\r\n    newGrid[row][column] = newNode;\r\n    return newGrid;\r\n  };\r\n\r\n  getNewGridWithWeights = (row, column) => {\r\n    const newGrid = this.state.grid.slice();\r\n    const node = newGrid[row][column];\r\n    let changeInValue = 0;\r\n    if (node.weight === 0) {\r\n      changeInValue = FixedWeight;\r\n    } else {\r\n      changeInValue = -FixedWeight;\r\n    }\r\n    const newNode = {\r\n      ...node,\r\n      isWall: false,\r\n      weight: node.weight + changeInValue,\r\n    };\r\n    newGrid[row][column] = newNode;\r\n    return newGrid;\r\n  };\r\n\r\n  handleMouseDown = (row, column) => {\r\n    if (this.state.processActive === true) {\r\n      return;\r\n    }\r\n    if (\r\n      !(\r\n        (row === startNode_Row && column === startNode_Col) ||\r\n        (row === endNode_Row && column === endNode_Col)\r\n      )\r\n    ) {\r\n      let newGrid;\r\n      if (!this.state.addWeights) {\r\n        newGrid = this.getNewGridWithWallToggled(row, column);\r\n      } else {\r\n        newGrid = this.getNewGridWithWeights(row, column);\r\n      }\r\n      this.setState({ grid: newGrid, isMousePressed: true });\r\n    }\r\n    // if user wants to change positon of start or end node\r\n    else {\r\n      this.setState({ isMousePressed: true });\r\n      if (row === startNode_Row && column === startNode_Col) {\r\n        const newGrid = this.state.grid.slice();\r\n        const node = newGrid[row][column];\r\n        const newNode = {\r\n          ...node,\r\n          isStart: false,\r\n        };\r\n        newGrid[row][column] = newNode;\r\n        this.setState({ grid: newGrid, isMovingStart: true });\r\n      } else if (row === endNode_Row && column === endNode_Col) {\r\n        const newGrid = this.state.grid.slice();\r\n        const node = newGrid[row][column];\r\n        const newNode = {\r\n          ...node,\r\n          isEnd: false,\r\n        };\r\n        newGrid[row][column] = newNode;\r\n        this.setState({ grid: newGrid, isMovingEnd: true });\r\n      }\r\n    }\r\n  };\r\n\r\n  handleMouseEnter = (row, column) => {\r\n    //Mouse entering a node with no click\r\n    if (!this.state.isMousePressed && !this.state.processActive) {\r\n      if (\r\n        !(\r\n          (row === startNode_Row && column === startNode_Col) ||\r\n          (row === endNode_Row && column === endNode_Col)\r\n        )\r\n      ) {\r\n        let newGrid;\r\n        if (!this.state.addWeights) {\r\n          newGrid = this.getNewGridWithWallToggled(row, column);\r\n        } else {\r\n          newGrid = this.getNewGridWithWeights(row, column);\r\n        }\r\n        this.setState({ grid: newGrid });\r\n      } else {\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this.state.isMovingStart){\r\n      const newGrid=this.state.grid;\r\n      newGrid[startNode_Row][startNode_Col].isStart=false;\r\n      newGrid[row][column].isStart=true;\r\n      startNode_Row=row;\r\n      startNode_Col=column;\r\n      this.setState({grid:newGrid});\r\n    }\r\n    else if (this.state.isMovingEnd){\r\n      const newGrid=this.state.grid;\r\n      newGrid[endNode_Row][endNode_Col].isEnd=false;\r\n      newGrid[row][column].isEnd=true;\r\n      endNode_Row=row;\r\n      endNode_Col=column;\r\n      this.setState({grid:newGrid});\r\n    }\r\n    if (\r\n      this.state.isMousePressed &&\r\n      !(\r\n        (row === startNode_Row && column === startNode_Col) ||\r\n        (row === endNode_Row && column === endNode_Col)\r\n      )\r\n    ) {\r\n      let newGrid;\r\n      if (!this.state.addWeights) {\r\n        newGrid = this.getNewGridWithWallToggled(row, column);\r\n      } else {\r\n        newGrid = this.getNewGridWithWeights(row, column);\r\n      }\r\n      this.setState({ grid: newGrid });\r\n    } else {\r\n    }\r\n  };\r\n\r\n  handleMouseUp = (row, column) => {\r\n    if (this.state.processActive === true) {\r\n      return;\r\n    }\r\n    this.setState({ isMousePressed: false });\r\n\r\n    //if moving start or end\r\n    if (this.state.isMovingStart === true) {\r\n      const newGrid = this.state.grid.slice();\r\n      const node = newGrid[row][column];\r\n      const newNode = {\r\n        ...node,\r\n        isWall: false,\r\n        isStart: true,\r\n      };\r\n      newGrid[row][column] = newNode;\r\n      this.setState({ grid: newGrid, isMovingStart: false });\r\n      startNode_Row = row;\r\n      startNode_Col = column;\r\n    } else if (this.state.isMovingEnd === true) {\r\n      const newGrid = this.state.grid.slice();\r\n      const node = newGrid[row][column];\r\n      const newNode = {\r\n        ...node,\r\n        isWall: false,\r\n        isEnd: true,\r\n      };\r\n      newGrid[row][column] = newNode;\r\n      this.setState({ grid: newGrid, isMovingEnd: false });\r\n      endNode_Row = row;\r\n      endNode_Col = column;\r\n    }\r\n  };\r\n\r\n  handleMouseLeave = (row, column) => {\r\n    if (!this.state.isMousePressed && !this.state.processActive) {\r\n      if (\r\n        !(\r\n          (row === startNode_Row && column === startNode_Col) ||\r\n          (row === endNode_Row && column === endNode_Col)\r\n        )\r\n      ) {\r\n        let newGrid;\r\n        if (!this.state.addWeights) {\r\n          newGrid = this.getNewGridWithWallToggled(row, column);\r\n        } else {\r\n          newGrid = this.getNewGridWithWeights(row, column);\r\n        }\r\n        this.setState({ grid: newGrid });\r\n      } else {\r\n      }\r\n      return;\r\n    }\r\n  };\r\n\r\n  animateAlgo = (visitedNodesInOrder, shortestPath) => {\r\n    this.setState({ processActive: true });\r\n    document.getElementById(\"visualize\").disabled = true;\r\n    document.getElementById(\"clearAlgo\").disabled = true;\r\n    document.getElementById(\"clearGrid\").disabled = true;\r\n    const newGrid = this.state.grid.slice();\r\n    for (let i = 1; i < visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length - 1) {\r\n        for (let j = 0; j < shortestPath.length; j++) {\r\n          setTimeout(() => {\r\n            setTimeout(() => {\r\n              const node = shortestPath[j];\r\n              const newGridNode = newGrid[node.row][node.column];\r\n              const newNode = {\r\n                ...newGridNode,\r\n                pathNode: true,\r\n              };\r\n              newGrid[node.row][node.column] = newNode;\r\n              if (\r\n                document.getElementById(`node-${node.row}-${node.column}`)\r\n                  .className === \"node weight-present-visited\"\r\n              ) {\r\n                document.getElementById(\r\n                  `node-${node.row}-${node.column}`\r\n                ).className = \"node weight-present-path\";\r\n              } else {\r\n                document.getElementById(\r\n                  `node-${node.row}-${node.column}`\r\n                ).className = \"node node-shortestPath\";\r\n              }\r\n            }, 50 * j);\r\n          }, 25 * i);\r\n        }\r\n        // Finally the solution to bug\r\n        setTimeout(() => {\r\n          setTimeout(() => {\r\n            this.setState({ processActive: false });\r\n            document.getElementById(\"visualize\").disabled = false;\r\n            document.getElementById(\"clearAlgo\").disabled = false;\r\n            document.getElementById(\"clearGrid\").disabled = false;\r\n            this.setState({ grid: newGrid});\r\n          }, 50 * shortestPath.length);\r\n        }, 25 * visitedNodesInOrder.length);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n              const newGridNode = newGrid[node.row][node.column];\r\n              const newNode = {\r\n                ...newGridNode,\r\n                visitedNode: true,\r\n              };\r\n              newGrid[node.row][node.column] = newNode;\r\n        if (\r\n          document.getElementById(`node-${node.row}-${node.column}`)\r\n            .className === \"node weight-present\"\r\n        ) {\r\n          document.getElementById(`node-${node.row}-${node.column}`).className =\r\n            \"node weight-present-visited\";\r\n        } else {\r\n          document.getElementById(`node-${node.row}-${node.column}`).className =\r\n            \"node node-visited\";\r\n        }\r\n      }, 25 * i);\r\n    }\r\n  };\r\n\r\n  visualizeDijkstra = () => {\r\n    this.clearAlgo(); //for clearing grid for any previous algo if implemented\r\n    const { grid } = this.state;\r\n    const startNode = grid[startNode_Row][startNode_Col];\r\n    const endNode = grid[endNode_Row][endNode_Col];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, endNode);\r\n    const shortestPath = getShortestPathDijkstra(grid, startNode, endNode);\r\n    const shortestPathCost = getWeightOfShortestPathDijkstra(\r\n      grid,\r\n      shortestPath\r\n    );\r\n    this.animateAlgo(visitedNodesInOrder, shortestPath);\r\n    this.setState({\r\n      timeComplexity: visitedNodesInOrder.length,\r\n      pathLength: shortestPath.length,\r\n      pathCost: shortestPathCost,\r\n    });\r\n  };\r\n\r\n  visualizeAstar = () => {\r\n    this.clearAlgo(); //for clearing grid for any previous algo if implemented\r\n    const { grid } = this.state;\r\n    const startNode = grid[startNode_Row][startNode_Col];\r\n    const endNode = grid[endNode_Row][endNode_Col];\r\n    const visitedNodesInOrder = aStar(grid, startNode, endNode);\r\n    const shortestPath = getShortestPathAstar(grid, startNode, endNode);\r\n    const shortestPathCost = getWeightOfShortestPathAstar(grid, shortestPath);\r\n    this.animateAlgo(visitedNodesInOrder, shortestPath);\r\n    this.setState({\r\n      timeComplexity: visitedNodesInOrder.length,\r\n      pathLength: shortestPath.length,\r\n      pathCost: shortestPathCost,\r\n    });\r\n  };\r\n\r\n  visualizeBFS = () => {\r\n    this.clearAlgo(); //for clearing grid for any previous algo if implemented\r\n    const { grid } = this.state;\r\n    const startNode = grid[startNode_Row][startNode_Col];\r\n    const endNode = grid[endNode_Row][endNode_Col];\r\n    const visitedNodesInOrder = bfs(grid, startNode, endNode);\r\n    const path = getPathBFS(grid, startNode, endNode);\r\n    this.animateAlgo(visitedNodesInOrder, path);\r\n    const pathCost = getWeightOfShortestPathBFS(grid, path);\r\n    this.setState({\r\n      timeComplexity: visitedNodesInOrder.length,\r\n      pathLength: path.length,\r\n      pathCost,\r\n    });\r\n  };\r\n\r\n  visualizeDFS = () => {\r\n    this.clearAlgo(); //for clearing grid for any previous algo if implemented\r\n    const { grid } = this.state;\r\n    const startNode = grid[startNode_Row][startNode_Col];\r\n    const endNode = grid[endNode_Row][endNode_Col];\r\n    const visitedNodesInOrder = dfs(grid, startNode, endNode);\r\n    const path = getPathDFS(grid, startNode, endNode);\r\n    this.animateAlgo(visitedNodesInOrder, path);\r\n    const pathCost = getWeightOfPathDFS(grid, path);\r\n    this.setState({\r\n      timeComplexity: visitedNodesInOrder.length,\r\n      pathLength: path.length,\r\n      pathCost,\r\n    });\r\n  };\r\n\r\n  //clear visitedNodes and shortestPath properties from the grid leaving walls and weights untouched\r\n  clearAlgo = () => {\r\n    const newGrid = this.state.grid;\r\n    for (let row = 0; row < total_rows; row++) {\r\n      for (let column = 0; column < total_columns; column++) {\r\n        newGrid[row][column].distance = Infinity;\r\n        newGrid[row][column].isVisited = false;\r\n        newGrid[row][column].previousNode = null;\r\n        newGrid[row][column].visitedNode = false;\r\n        newGrid[row][column].pathNode = false;\r\n        if (\r\n          !(\r\n            (row === startNode_Row && column === startNode_Col) ||\r\n            (row === endNode_Row && column === endNode_Col) ||\r\n            newGrid[row][column].isWall === true\r\n          )\r\n        ) {\r\n          if (newGrid[row][column].weight > 0) {\r\n            document.getElementById(`node-${row}-${column}`).className =\r\n              \"node weight-present\";\r\n          } else {\r\n            document.getElementById(`node-${row}-${column}`).className = \"node\";\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.setState({\r\n      grid: newGrid,\r\n      timeComplexity: 0,\r\n      pathLength: 0,\r\n      pathCost: 0,\r\n    });\r\n  };\r\n\r\n  //clear whole grid\r\n  undoAlgoAndWalls = () => {\r\n    const newGrid = this.state.grid;\r\n    for (let row = 0; row < total_rows; row++) {\r\n      for (let column = 0; column < total_columns; column++) {\r\n        newGrid[row][column].distance = Infinity;\r\n        newGrid[row][column].isVisited = false;\r\n        newGrid[row][column].previousNode = null;\r\n        newGrid[row][column].isWall = false;\r\n        newGrid[row][column].weight = 0;\r\n        newGrid[row][column].visitedNode = false;\r\n        newGrid[row][column].pathNode = false;\r\n        if (\r\n          !(\r\n            (row === startNode_Row && column === startNode_Col) ||\r\n            (row === endNode_Row && column === endNode_Col)\r\n          )\r\n        ) {\r\n          document.getElementById(`node-${row}-${column}`).className = \"node\";\r\n        }\r\n      }\r\n    }\r\n    this.setState({\r\n      grid: newGrid,\r\n      timeComplexity: 0,\r\n      pathLength: 0,\r\n      pathCost: 0,\r\n    });\r\n  };\r\n\r\n  handleCheckboxChange = () => {\r\n    this.setState({ addWeights: !this.state.addWeights });\r\n  };\r\n\r\n  getDescription=(algo)=>{\r\n    if (algo===\"Dijkstra\"){\r\n      this.setState({description:\"Dijkstra's Algorithm is Weighted and guarantees the Shortest Path!\"});\r\n    }\r\n    else if (algo===\"Astar\"){\r\n      this.setState({description:\"A* Search (AI based Algorithm) is Weighted and guarantees the Shortest Path!\"});\r\n    }\r\n    else if (algo===\"BFS\"){\r\n      this.setState({description:\"Breath-first Search is Unweighted and guarantees the Shortest Path!\"});\r\n    }\r\n    else if (algo===\"DFS\"){\r\n      this.setState({description:\"Depth-first Search is Unweighted and does not guarantee the Shortest path!\"});\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { grid } = this.state;\r\n    return (\r\n      <div>\r\n        <Navbar\r\n          addWeights={this.state.addWeights}\r\n          handleDijkstra={this.visualizeDijkstra}\r\n          handleAstar={this.visualizeAstar}\r\n          handleBFS={this.visualizeBFS}\r\n          handleDFS={this.visualizeDFS}\r\n          handleClearAlgorithm={this.clearAlgo}\r\n          handleClearGrid={this.undoAlgoAndWalls}\r\n          handleCheckboxChange={this.handleCheckboxChange}\r\n          processActive={this.state.processActive}\r\n          timeComplexity={this.state.timeComplexity}\r\n          pathCost={this.state.pathCost}\r\n          pathLength={this.state.pathLength}\r\n          handleDescription={(algo)=>this.getDescription(algo)}\r\n        ></Navbar>\r\n        <div className=\"labels mt-3\">\r\n          <li className=\"node startNode ml-5\"></li>  Start node\r\n          <li className=\"node endNode ml-5\"></li>  End Node\r\n          <li className=\"node node-visited ml-5\"></li>  Visited node\r\n          <li className=\"node node-shortestPath ml-5\"></li>  Path Node\r\n          <li className=\"node wall-true ml-5\"></li>  Obstacle Node\r\n          <li className=\"node weight-present ml-5\"></li>  Weight Node\r\n          <li className=\"node ml-5\"></li>  Unvisited Node\r\n        </div>\r\n\r\n        <div className=\"description mt-3\">\r\n          {this.state.description}\r\n        </div>\r\n        \r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      row={node.row}\r\n                      column={node.column}\r\n                      isStart={node.isStart}\r\n                      isEnd={node.isEnd}\r\n                      distance={node.distance}\r\n                      isVisited={node.isVisited}\r\n                      previousNode={node.previousNode}\r\n                      isWall={node.isWall}\r\n                      weight={node.weight}\r\n                      visitedNode={node.visitedNode}\r\n                      pathNode={node.pathNode}\r\n                      // isMousePressed={isMousePressed}\r\n                      onMouseDown={(row, column) =>\r\n                        this.handleMouseDown(row, column)\r\n                      }\r\n                      onMouseEnter={(row, column) =>\r\n                        this.handleMouseEnter(row, column)\r\n                      }\r\n                      onMouseUp={(row, column) =>\r\n                        this.handleMouseUp(row, column)\r\n                      }\r\n                      onMouseLeave={(row, column) =>\r\n                        this.handleMouseLeave(row,column)\r\n                      }\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GraphAlgoVisualizer;\r\n","import React from \"react\";\r\nimport './canvas.css'\r\nclass Canvas extends React.Component {\r\n  state = {\r\n    coord: [],\r\n    minimumCost: 0,\r\n  };\r\n\r\n  newCanvas() {\r\n    let newcoord = [];\r\n    const ctx = this.canvas.getContext(\"2d\");\r\n    this.setState({ coord: newcoord }, function () {\r\n      this.props.draw(this.canvas, ctx, this.state.coord);\r\n    });\r\n  }\r\n\r\n  setCost(cost) {\r\n    this.setState({ minimumCost: cost });\r\n  }\r\n\r\n  prims() {\r\n    let visited = [];\r\n    let unvisited = [];\r\n    let unvisited1 = [];\r\n    let total = 0;\r\n    for (let i in this.state.coord) {\r\n      unvisited.push(this.state.coord[i]);\r\n      unvisited1.push(this.state.coord[i]);\r\n    }\r\n    let length = unvisited.length;\r\n    let first = unvisited[0];\r\n\r\n    visited.push(first);\r\n    unvisited.splice(0, 1);\r\n\r\n    while (length > 1) {\r\n      let minEdge = Infinity;\r\n      let parent = null;\r\n      let currentVertex = null;\r\n      for (let i in visited) {\r\n        for (let j in unvisited) {\r\n          let weight = this.calWeight(\r\n            visited[i][0],\r\n            visited[i][1],\r\n            unvisited[j][0],\r\n            unvisited[j][1]\r\n          );\r\n          if (minEdge > weight) {\r\n            minEdge = weight;\r\n            currentVertex = j;\r\n            parent = i;\r\n          }\r\n        }\r\n      }\r\n      minEdge = minEdge / 5;\r\n      minEdge = Math.round(minEdge);\r\n      total += minEdge;\r\n      console.log(this.state.totalCount);\r\n      this.props.drawPrims(\r\n        minEdge,\r\n        parent,\r\n        currentVertex,\r\n        visited,\r\n        unvisited,\r\n        this.canvas,\r\n        this.canvas.getContext(\"2d\")\r\n      );\r\n      visited.push(unvisited[currentVertex]);\r\n      unvisited.splice(currentVertex, 1);\r\n      length = length - 1;\r\n    }\r\n    this.setCost(total);\r\n  }\r\n  calWeight(x1, y1, x2, y2) {\r\n    let x = Math.pow(x1 - x2, 2);\r\n    let y = Math.pow(y1 - y2, 2);\r\n    return Math.sqrt(x + y);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const ctx = this.canvas.getContext(\"2d\");\r\n    this.props.outline(this.canvas, ctx);\r\n  }\r\n\r\n  render() {\r\n    let width = window.innerWidth - 45;\r\n    let height = window.innerHeight * 0.6;\r\n\r\n    return (\r\n      <div id=\"head\">\r\n        <div\r\n          className=\" pt-2 pb-2 text-light container-float\"\r\n          style={{ backgroundColor: \"#262626\" }}\r\n        >\r\n          <div className=\"navbar-brand ml-4 \">Minimum Spanning Tree</div>\r\n        </div>\r\n\r\n        <div className=\"mt-2 mt-2 d-flex justify-content-center\">\r\n          You can start drawing the MST by clicking on canvas.&nbsp;&nbsp;\r\n          <b>Left-Click</b>&nbsp;to Add |&nbsp;<b>Right-Click</b>&nbsp;to\r\n          Remove.\r\n        </div>\r\n        <div className=\"mt-2 d-flex justify-content-center\">\r\n          Generated by&nbsp;<b>Prim's Algorithm</b>&nbsp;using&nbsp;\r\n          <b>Euclidean Distances</b>&nbsp;as weights of graph\r\n        </div>\r\n        <br></br>\r\n          <div className=\"mt-2 justify-content-center\" style={{display: 'flex'}}>\r\n            <div style={{color: \"darkblue\",fontSize:\"large\"}}>\r\n            <b>{this.state.minimumCost === 0 ? \"Minimum Spanning Tree Cost is displayed here \" : \"Minimum Spanning Tree Cost : \" + this.state.minimumCost} </b> \r\n            </div>\r\n          <button\r\n            className=\"btn btn-outline-dark mr-4 pt-2\"\r\n            style={{position: 'absolute', right: '0'}}\r\n            onClick={() => {\r\n              this.newCanvas();\r\n              this.setCost(0);\r\n            }}\r\n          >\r\n            <b>Clear Canvas</b>\r\n          </button>\r\n        </div>\r\n        <br></br>\r\n        <canvas\r\n          className=\"mr-4 ml-4 mt-2 bg-light\"\r\n          onClick={(e) => {\r\n            const ctx = this.canvas.getContext(\"2d\");\r\n            let coord = [];\r\n            let xypair = [];\r\n            coord.push(e.clientX);\r\n            coord.push(e.clientY);\r\n\r\n            xypair.push(coord);\r\n\r\n            if (this.state.coord.length === 0) {\r\n              this.setState({ coord: xypair }, function () {\r\n                //->prims (prims will draw edges)\r\n                this.props.draw(this.canvas, ctx, this.state.coord);\r\n              });\r\n            } else {\r\n              let newCoord = this.state.coord;\r\n              newCoord.push(xypair[0]);\r\n              this.setState({ coord: newCoord }, function () {\r\n                this.props.draw(this.canvas, ctx, this.state.coord);\r\n                this.prims();\r\n              });\r\n            }\r\n          }}\r\n          onContextMenu={(e) => {\r\n            e.preventDefault();\r\n            const ctx = this.canvas.getContext(\"2d\");\r\n            let coordX = e.clientX;\r\n            let coordY = e.clientY;\r\n            let coord = this.state.coord;\r\n\r\n            for (let i in this.state.coord) {\r\n              let isInside =\r\n                Math.sqrt(\r\n                  Math.pow(coord[i][0] - coordX, 2) +\r\n                    Math.pow(coord[i][1] - coordY, 2)\r\n                ) < 8;\r\n              if (isInside) {\r\n                coord.splice(i, 1);\r\n                break;\r\n              }\r\n            }\r\n            this.setState({ coord: coord }, function () {\r\n              this.props.draw(this.canvas, ctx, this.state.coord);\r\n              this.prims();\r\n            });\r\n          }}\r\n          ref={(node) => (this.canvas = node)}\r\n          width={width}\r\n          height={height}\r\n        />\r\n        <p>\r\n          <br></br>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Canvas;\r\n","import React from \"react\";\r\n\r\nimport Canvas from \"./canvas\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nclass MinimumSpanningTree extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.ChildElement = React.createRef();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Canvas\r\n          width={1405}\r\n          height={500}\r\n          outline={(canvas, ctx) => {\r\n            ctx.strokeRect(0, 0, canvas.width, canvas.height);\r\n          }}\r\n          draw={(canvas, ctx, coord) => {\r\n            let rect = canvas.getBoundingClientRect();\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n            ctx.strokeRect(0, 0, canvas.width, canvas.height);\r\n            for (let i in coord) {\r\n              ctx.fillStyle = \"#1e2433\";\r\n              ctx.beginPath();\r\n              ctx.arc(\r\n                coord[i][0] - rect.left,\r\n                coord[i][1] - rect.top,\r\n                10,\r\n                0,\r\n                2 * Math.PI\r\n              );\r\n              ctx.fill();\r\n            }\r\n          }}\r\n          drawPrims={(\r\n            data1,\r\n            source,\r\n            destination,\r\n            visited,\r\n            unvisited,\r\n            canvas,\r\n            ctx\r\n          ) => {\r\n            let rect = canvas.getBoundingClientRect();\r\n            ctx.strokeStyle = \"#1e1e33\";\r\n            ctx.beginPath();\r\n            ctx.moveTo(\r\n              visited[source][0] - rect.left,\r\n              visited[source][1] - rect.top\r\n            );\r\n            let x =\r\n              visited[source][0] -\r\n              rect.left +\r\n              unvisited[destination][0] -\r\n              rect.left;\r\n            x = x / 2;\r\n            let y =\r\n              visited[source][1] -\r\n              rect.top +\r\n              unvisited[destination][1] -\r\n              rect.top;\r\n            y = y / 2;\r\n            ctx.font = \"12px Roboto sans-serif\";\r\n            ctx.lineTo(\r\n              unvisited[destination][0] - rect.left,\r\n              unvisited[destination][1] - rect.top\r\n            );\r\n            ctx.stroke();\r\n            ctx.strokeStyle = \"blue\";\r\n            ctx.strokeText(data1, x, y);\r\n          }}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MinimumSpanningTree;\r\n","import React from \"react\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <>\r\n      <Nav\r\n        justify\r\n        variant=\"pills\"\r\n        defaultActiveKey=\"/gav\"\r\n        className=\"navstyle\"\r\n        style={{ backgroundColor: \"#262626\" }}\r\n      >\r\n        <Nav.Item>\r\n          <Link to=\"/gav\">\r\n            <Nav.Link href=\"/gav\" className=\"nav-link-style\">\r\n              Path Finding Visualizer\r\n            </Nav.Link>\r\n          </Link>\r\n        </Nav.Item>\r\n        <Nav.Item>\r\n          <Link to=\"/mst\">\r\n            <Nav.Link href=\"/mst\" className=\"nav-link-style\" eventKey=\"link-1\">\r\n              Minimum Spanning Tree\r\n            </Nav.Link>\r\n          </Link>\r\n        </Nav.Item>\r\n        <Nav.Item>\r\n          <Link to=\"/TopologicalSorting\">\r\n            <Nav.Link\r\n              href=\"/TopologicalSorting\"\r\n              className=\"nav-link-style\"\r\n              eventKey=\"link-2\"\r\n            >\r\n              Topological Sorting\r\n            </Nav.Link>\r\n          </Link>\r\n        </Nav.Item>\r\n      </Nav>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <div className=\"footer\">\r\n      <p>\r\n        Hosted on{\" \"}\r\n        <a\r\n          href=\"https://github.com/kushgupta-official/Graph-algo-visualizer\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          GitHub\r\n        </a>\r\n        , Developed by KKK (\r\n        <a\r\n          href=\"https://www.linkedin.com/in/karanipec22/\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Karan Kohli\r\n        </a>\r\n        ,{\" \"}\r\n        <a\r\n          href=\"https://www.linkedin.com/in/krishna-kumar-a4611123b/\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Krishna Kumar\r\n        </a>\r\n        ,{\" \"}\r\n        <a\r\n          href=\"https://www.linkedin.com/in/kush-gupta-in/\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Kush Gupta\r\n        </a>\r\n        )\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\nimport GraphAlgoVisualizer from \"./graphAlgoVisualizer/graphAlgoVisualizer\";\nimport MinimumSpanningTree from \"./minimumSpanningTree/minimumSpanningTree\";\nimport TopologicalSorting from \"./topologicalSorting/FormInput\";\nimport {\n  BrowserRouter as Router,\n  Routes as Switch,\n  Route,\n} from \"react-router-dom\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\n\nclass App extends Component {\n  state = {};\n  render() {\n    return (\n      <>\n        <Router>\n          <Header />\n          <Switch>\n            <Route exact path=\"/\" element={<GraphAlgoVisualizer />} />\n            <Route\n              exact\n              path=\"/Graph-Algo-Visualizer\"\n              element={<GraphAlgoVisualizer />}\n            />\n            <Route exact path=\"/gav\" element={<GraphAlgoVisualizer />} />\n            <Route exact path=\"/mst\" element={<MinimumSpanningTree />} />\n            <Route\n              exact\n              path=\"/TopologicalSorting\"\n              element={<TopologicalSorting />}\n            />\n          </Switch>\n        </Router>\n        <Footer />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport ReactGA from \"react-ga\";\nReactGA.initialize(\"UA-179559461-1\");\nReactGA.pageview(window.location.pathname + window.location.search);\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}