{"version":3,"sources":["graphAlgoVisualizer/node/node.jsx","algorithms/dijkstra.js","algorithms/aStar.js","graphAlgoVisualizer/graphAlgoVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","state","getClassName","str","props","isStart","isEnd","isWall","this","row","column","onMouseDown","distance","isVisited","previousNode","onMouseUp","onMouseEnter","className","id","Component","dijkstra","grid","startNode","endNode","visitedNodeInOrder","unvisitedNodes","nodes","columns","push","getAllNodes","console","log","length","sortNodesByDistance","nearestNode","shift","Infinity","updateUnvisitedNeighbours","sort","nodeA","nodeB","node","unvisitedNeighbours","getUnvisitedNeighbours","ite","getShortestPathDijkstra","shortestPath","previous","reverse","aStar","visitedNodesInOrder","Math","abs","toReturn","rows","sortNodesByValueF","nextNode","currentNode","targetNode","getShortestPathAstar","GraphAlgoVisualizer","isMousePressed","timeComplexity","getNewGridWithWallToggled","newGrid","slice","newNode","handleMouseDown","setState","handleMouseEnter","handleMouseUp","animateDijkstra","i","j","setTimeout","document","getElementById","animateAstar","visualizeDijkstra","visualizeAstar","currentRow","onClick","map","rowIdx","key","nodeIdx","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0RA4CeA,G,kNAxCbC,MAAQ,G,EACRC,aAAe,WACb,IAAIC,EAAM,OAQV,OAP2B,IAAvB,EAAKC,MAAMC,QACbF,GAAY,cACkB,IAArB,EAAKC,MAAME,MACpBH,GAAY,YACmB,IAAtB,EAAKC,MAAMG,SACpBJ,GAAY,cAEPA,G,uDAGC,IAAD,EAaHK,KAAKJ,MAXPK,EAFK,EAELA,IACAC,EAHK,EAGLA,OAOAC,GAVK,EAILN,QAJK,EAKLC,MALK,EAMLM,SANK,EAOLC,UAPK,EAQLC,aARK,EASLP,OATK,EAULI,aACAI,EAXK,EAWLA,UACAC,EAZK,EAYLA,aAGF,OACE,yBACEC,UAAWT,KAAKN,eAChBgB,GAAE,eAAUT,EAAV,YAAiBC,GACnBC,YAAa,kBAAMA,EAAYF,EAAKC,IACpCM,aAAc,kBAAMA,EAAaP,EAAKC,IACtCK,UAAW,kBAAMA,W,GAnCNI,c,eCGZ,SAASC,EAASC,EAAMC,EAAWC,GACxC,IAAMC,EAAqB,GAC3BF,EAAUV,SAAW,EACrB,IAAMa,EAoDR,SAAqBJ,GACnB,IADyB,EACrBK,EAAQ,GADa,cAETL,GAFS,IAEzB,2BAAsB,CAAC,IAAD,EAAbZ,EAAa,sBACAA,GADA,IACpB,2BAAyB,CAAC,IAAjBkB,EAAgB,QACvBD,EAAME,KAAKD,IAFO,gCAFG,8BAOzB,OAAOD,EA3DgBG,CAAYR,GAEnC,IADAS,QAAQC,IAAIN,GACHA,EAAeO,QAAQ,CAC9BC,EAAoBR,GACpB,IAAMS,EAAcT,EAAeU,QACnC,GAAID,EAAYtB,WAAawB,IAC3B,OAAOZ,EAET,IAA2B,IAAvBU,EAAY3B,OAAhB,CAKA,GAFA2B,EAAYrB,WAAY,EACxBW,EAAmBI,KAAKM,GACpBA,IAAgBX,EAClB,OAAOC,EAETa,EAA0BH,EAAab,KAK3C,SAASY,EAAoBR,GAC3BA,EAAea,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAM3B,SAAW4B,EAAM5B,YAG/D,SAASyB,EAA0BI,EAAMpB,GACvC,IAD6C,EACvCqB,EAQR,SAAgCD,EAAMpB,GACpC,IAAMqB,EAAsB,GACpBjC,EAAgBgC,EAAhBhC,IAAKC,EAAW+B,EAAX/B,OACTD,EAAM,GAAK,IAAyC,IAApCY,EAAKZ,EAAM,GAAGC,GAAQG,WACxC6B,EAAoBd,KAAKP,EAAKZ,EAAM,GAAGC,IAErCD,EAAM,EAAIY,EAAKW,SAA8C,IAApCX,EAAKZ,EAAM,GAAGC,GAAQG,WACjD6B,EAAoBd,KAAKP,EAAKZ,EAAM,GAAGC,IAErCA,EAAS,GAAK,IAAyC,IAApCW,EAAKZ,GAAKC,EAAS,GAAGG,WAC3C6B,EAAoBd,KAAKP,EAAKZ,GAAKC,EAAS,IAE1CA,EAAS,EAAIW,EAAK,GAAGW,SAA8C,IAApCX,EAAKZ,GAAKC,EAAS,GAAGG,WACvD6B,EAAoBd,KAAKP,EAAKZ,GAAKC,EAAS,IAE9C,OAAOgC,EAvBqBC,CAAuBF,EAAMpB,GADZ,cAE3BqB,GAF2B,IAE7C,2BAAuC,CAAC,IAA7BE,EAA4B,QACrCA,EAAIhC,SAAW6B,EAAK7B,SAAW,EAC/BgC,EAAI9B,aAAe2B,GAJwB,8BAM7C,OAAOC,EA+BF,SAASG,EAAwBxB,EAAMC,EAAWC,GACvD,IAAMuB,EAAe,GACjBC,EAAWxB,EAAQT,aACvB,GAAiB,OAAbiC,EACF,OAAOD,EAET,KAAOC,IAAazB,GAClBwB,EAAalB,KAAKmB,GAClBA,EAAWA,EAASjC,aAGtB,OADAgC,EAAaE,UACNF,EChFF,SAASG,EAAM5B,EAAMC,EAAWC,GACrC,IAAM2B,EAAsB,GAC5B5B,EAAUV,SACRuC,KAAKC,IAAI9B,EAAUb,IAAMc,EAAQd,KACjC0C,KAAKC,IAAI9B,EAAUZ,OAASa,EAAQb,QAEtC,IADA,IAAMe,EAuBR,SAAqBJ,GACnB,IADyB,EACnBgC,EAAW,GADQ,cAERhC,GAFQ,IAEzB,2BAAuB,CAAC,IAAD,EAAdiC,EAAc,sBACDA,GADC,IACrB,2BAA0B,CAAC,IAAlB3B,EAAiB,QACxB0B,EAASzB,KAAKD,IAFK,gCAFE,8BAOzB,OAAO0B,EA9BgBxB,CAAYR,GAC1BI,EAAeO,QAAQ,CAC9BuB,EAAkB9B,GAClB,IAAM+B,EAAW/B,EAAeU,QAChC,GAAIqB,IAAapB,IACf,OAAOc,EAET,IAAIM,EAASjD,OAAb,CAKA,GAFAiD,EAAS3C,WAAY,EACrBqC,EAAoBtB,KAAK4B,GACrBA,IAAajC,EACf,OAAO2B,EAETb,EAA0BmB,EAAUjC,EAASF,KAIjD,SAASkC,EAAkB9B,GACzBA,EAAea,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAM3B,SAAW4B,EAAM5B,YAa/D,SAASyB,EAA0BoB,EAAaC,EAAYrC,GAC1D,IADgE,EAC1DqB,EAcR,SAAgCe,EAAapC,GAC3C,IAAMqB,EAAsB,GACpBjC,EAAgBgD,EAAhBhD,IAAKC,EAAW+C,EAAX/C,OACTD,EAAM,GAAK,IAAyC,IAApCY,EAAKZ,EAAM,GAAGC,GAAQG,WACxC6B,EAAoBd,KAAKP,EAAKZ,EAAM,GAAGC,IAErCD,EAAM,EAAIY,EAAKW,SAA8C,IAApCX,EAAKZ,EAAM,GAAGC,GAAQG,WACjD6B,EAAoBd,KAAKP,EAAKZ,EAAM,GAAGC,IAErCA,EAAS,GAAK,IAAyC,IAApCW,EAAKZ,GAAKC,EAAS,GAAGG,WAC3C6B,EAAoBd,KAAKP,EAAKZ,GAAKC,EAAS,IAE1CA,EAAS,EAAIW,EAAK,GAAGW,SAA8C,IAApCX,EAAKZ,GAAKC,EAAS,GAAGG,WACvD6B,EAAoBd,KAAKP,EAAKZ,GAAKC,EAAS,IAE9C,OAAOgC,EA7BqBC,CAAuBc,EAAapC,GADA,cAEhDqB,GAFgD,IAEhE,2BAAqC,CAAC,IAA7BE,EAA4B,QACnCA,EAAIhC,SACF6C,EAAY7C,UACXuC,KAAKC,IAAIK,EAAYhD,IAAMiD,EAAWjD,KACrC0C,KAAKC,IAAIK,EAAY/C,OAASgD,EAAWhD,SAC3C,EACAyC,KAAKC,IAAIR,EAAInC,IAAMiD,EAAWjD,KAC9B0C,KAAKC,IAAIR,EAAIlC,OAASgD,EAAWhD,QACnCkC,EAAI9B,aAAe2C,GAV2C,8BAYhE,OAAOf,EAqBF,SAASiB,EAAqBtC,EAAMC,EAAWC,GACpD,IAAMuB,EAAe,GACjBC,EAAWxB,EAAQT,aACvB,GAAiB,OAAbiC,EACF,OAAOD,EAET,KAAOC,IAAazB,GAClBwB,EAAalB,KAAKmB,GAClBA,EAAWA,EAASjC,aAGtB,OADAgC,EAAaE,UACNF,EC9ET,IA8Nec,E,4MAtNb3D,MAAQ,CACNoB,KAAM,GACNwC,gBAAgB,EAChBC,eAAgB,G,EAyBlBC,0BAA4B,SAACtD,EAAKC,GAChC,IAAMsD,EAAU,EAAK/D,MAAMoB,KAAK4C,QAC1BxB,EAAOuB,EAAQvD,GAAKC,GACpBwD,EAAO,2BACRzB,GADQ,IAEXlC,QAASkC,EAAKlC,SAGhB,OADAyD,EAAQvD,GAAKC,GAAUwD,EAChBF,G,EAGTG,gBAAkB,SAAC1D,EAAKC,GACtB,GA9CkB,KAgDbD,GA/Ca,KA+CYC,GA9Cd,KA+CXD,GA9CW,KA8CYC,EAO1BoB,QAAQC,IAAItB,EAAKC,EAAQ,iCACzB,EAAK0D,SAAS,CAAEP,gBAAgB,QANhC,CACA/B,QAAQC,IAAItB,EAAKC,EAAQ,cACzB,IAAMsD,EAAU,EAAKD,0BAA0BtD,EAAKC,GACpD,EAAK0D,SAAS,CAAE/C,KAAM2C,EAASH,gBAAgB,M,EAOnDQ,iBAAmB,SAAC5D,EAAKC,GACvB,GAAK,EAAKT,MAAM4D,eAChB,GA/DkB,KAiEbpD,GAhEa,KAgEYC,GA/Dd,KAgEXD,GA/DW,KA+DYC,EAO1BoB,QAAQC,IAAI,wCALZ,CACAD,QAAQC,IAAItB,EAAKC,EAAQ,eACzB,IAAMsD,EAAU,EAAKD,0BAA0BtD,EAAKC,GACpD,EAAK0D,SAAS,CAAE/C,KAAM2C,M,EAM1BM,cAAgB,WACdxC,QAAQC,IAAI,YACZ,EAAKqC,SAAS,CAAEP,gBAAgB,K,EAGlCU,gBAAkB,SAACrB,EAAqBJ,GACtC,IADwD,IAAD,WAC9C0B,GACP,GAAIA,IAAMtB,EAAoBlB,OAAS,EAAG,CACxC,IADyC,IAAD,WAC/ByC,GACPC,YAAW,WACTA,YAAW,WACT,IAAMjC,EAAOK,EAAa2B,GAC1BE,SAASC,eAAT,eACUnC,EAAKhC,IADf,YACsBgC,EAAK/B,SACzBO,UAAY,2BACb,GAAKwD,KACP,GAAKD,IARDC,EAAI,EAAGA,EAAI3B,EAAad,OAAQyC,IAAzC,EAASA,GAST,MAAM,CAAN,UAEFC,YAAW,WACT,IAAMjC,EAAOS,EAAoBsB,GACjCG,SAASC,eAAT,eAAgCnC,EAAKhC,IAArC,YAA4CgC,EAAK/B,SAAUO,UACzD,sBACD,GAAKuD,IAjBDA,EAAI,EAAGA,EAAItB,EAAoBlB,OAAQwC,IAAK,CAAC,IAAD,IAA5CA,GAA4C,oC,EAqBvDK,aAAe,SAAC3B,EAAqBJ,GACnC,IADqD,IAAD,WAC3C0B,GACP,GAAIA,IAAMtB,EAAoBlB,OAAS,EAAG,CACxC,IADyC,IAAD,WAC/ByC,GACPC,YAAW,WACTA,YAAW,WACT,IAAMjC,EAAOK,EAAa2B,GAC1BE,SAASC,eAAT,eACUnC,EAAKhC,IADf,YACsBgC,EAAK/B,SACzBO,UAAY,2BACb,GAAKwD,KACP,GAAKD,IARDC,EAAI,EAAGA,EAAI3B,EAAad,OAAQyC,IAAzC,EAASA,GAST,MAAM,CAAN,UAEFC,YAAW,WACT,IAAMjC,EAAOS,EAAoBsB,GACjCG,SAASC,eAAT,eAAgCnC,EAAKhC,IAArC,YAA4CgC,EAAK/B,SAAUO,UACzD,sBACD,GAAKuD,IAjBDA,EAAI,EAAGA,EAAItB,EAAoBlB,OAAQwC,IAAK,CAAC,IAAD,IAA5CA,GAA4C,oC,EAqBvDM,kBAAoB,WAAO,IACjBzD,EAAS,EAAKpB,MAAdoB,KACFC,EAAYD,EAhIA,IACA,IAgIZE,EAAUF,EA/HA,IACA,IA+HV6B,EAAsB9B,EAASC,EAAMC,EAAWC,GAEhDuB,EAAeD,EAAwBxB,EAAMC,EAAWC,GAE9D,EAAKgD,gBAAgBrB,EAAqBJ,GAC1C,EAAKsB,SAAS,CAAEN,eAAgBZ,EAAoBlB,U,EAKtD+C,eAAiB,WAAO,IACd1D,EAAS,EAAKpB,MAAdoB,KACFC,EAAYD,EA9IA,IACA,IA8IZE,EAAUF,EA7IA,IACA,IA6IV6B,EAAsBD,EAAM5B,EAAMC,EAAWC,GAE7CuB,EAAea,EAAqBtC,EAAMC,EAAWC,GAC3DO,QAAQC,IAAImB,GACZ,EAAK2B,aAAa3B,EAAqBJ,GACvC,EAAKsB,SAAS,CAAEN,eAAgBZ,EAAoBlB,U,kEAvIpD,IADA,IAAMX,EAAO,GACJZ,EAAM,EAAGA,EAhBH,GAgBqBA,IAAO,CAEzC,IADA,IAAMuE,EAAa,GACVtE,EAAS,EAAGA,EAjBL,GAiB6BA,IAAU,CACrD,IAAM+C,EAAc,CAClBhD,MACAC,SACAL,QApBY,KAoBHI,GAnBG,KAmBsBC,EAClCJ,MAnBU,KAmBHG,GAlBG,KAkBoBC,EAC9BE,SAAUwB,IACVvB,WAAW,EACXC,aAAc,KACdP,QAAQ,GAEVyE,EAAWpD,KAAK6B,GAElBpC,EAAKO,KAAKoD,GAEZxE,KAAK4D,SAAS,CAAE/C,W,+BA0HR,IAAD,OACCA,EAASb,KAAKP,MAAdoB,KAER,OACE,yBAAKJ,UAAU,mBACb,4BACEA,UAAU,yBACVgE,QAASzE,KAAKsE,mBAFhB,gCAMA,4BACE7D,UAAU,yBACVgE,QAASzE,KAAKuE,gBAFhB,0BAMA,0BAAM9D,UAAU,QAAhB,mCACmCT,KAAKP,MAAM6D,gBAE9C,yBAAK7C,UAAU,QACZI,EAAK6D,KAAI,SAACzE,EAAK0E,GACd,OACE,yBAAKC,IAAKD,GACP1E,EAAIyE,KAAI,SAACzC,EAAM4C,GAAa,IAEzB5E,EASEgC,EATFhC,IACAC,EAQE+B,EARF/B,OACAL,EAOEoC,EAPFpC,QACAC,EAMEmC,EANFnC,MACAM,EAKE6B,EALF7B,SACAC,EAIE4B,EAJF5B,UACAC,EAGE2B,EAHF3B,aACAP,EAEEkC,EAFFlC,OACAsD,EACEpB,EADFoB,eAEF,OACE,kBAAC,EAAD,CACEuB,IAAKC,EACL5E,IAAKA,EACLC,OAAQA,EACRL,QAASA,EACTC,MAAOA,EACPM,SAAUA,EACVC,UAAWA,EACXC,aAAcA,EACdP,OAAQA,EACRsD,eAAgBA,EAChBlD,YAAa,SAACF,EAAKC,GAAN,OACX,EAAKyD,gBAAgB1D,EAAKC,IAE5BM,aAAc,SAACP,EAAKC,GAAN,OACZ,EAAK2D,iBAAiB5D,EAAKC,IAE7BK,UAAW,kBAAM,EAAKuD,gC,GA1MVnD,aCHnBmE,E,4MANbrF,MAAQ,G,uDAEN,OAAO,kBAAC,EAAD,U,GAHOkB,aCSEoE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnB,SAASC,eAAe,SDwHpB,kBAAmBmB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxE,QAAQwE,MAAMA,EAAMC,a","file":"static/js/main.ce1c81cc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./node.css\";\r\n\r\nclass Node extends Component {\r\n  state = {};\r\n  getClassName = () => {\r\n    let str = \"node\";\r\n    if (this.props.isStart === true) {\r\n      str = str + \" startNode\";\r\n    } else if (this.props.isEnd === true) {\r\n      str = str + \" endNode\";\r\n    } else if (this.props.isWall === true) {\r\n      str = str + \" wall-true\";\r\n    }\r\n    return str;\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      row,\r\n      column,\r\n      isStart,\r\n      isEnd,\r\n      distance,\r\n      isVisited,\r\n      previousNode,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseUp,\r\n      onMouseEnter,\r\n    } = this.props;\r\n    //console.log(  this.props);\r\n    return (\r\n      <div\r\n        className={this.getClassName()}\r\n        id={`node-${row}-${column}`}\r\n        onMouseDown={() => onMouseDown(row, column)}\r\n        onMouseEnter={() => onMouseEnter(row, column)}\r\n        onMouseUp={() => onMouseUp()}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Node;\r\n","/*Problems:\r\n  1. when an operation is going on, no other operation will work\r\n  2. reset button\r\n  3. a star algo\r\n  4. time complexity\r\n*/\r\nexport function dijkstra(grid, startNode, endNode) {\r\n  const visitedNodeInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  console.log(unvisitedNodes);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const nearestNode = unvisitedNodes.shift();\r\n    if (nearestNode.distance === Infinity) {\r\n      return visitedNodeInOrder;\r\n    }\r\n    if (nearestNode.isWall === true) {\r\n      continue;\r\n    }\r\n    nearestNode.isVisited = true;\r\n    visitedNodeInOrder.push(nearestNode);\r\n    if (nearestNode === endNode) {\r\n      return visitedNodeInOrder;\r\n    }\r\n    updateUnvisitedNeighbours(nearestNode, grid);\r\n    // console.log(visitedNodeInOrder);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbours(node, grid) {\r\n  const unvisitedNeighbours = getUnvisitedNeighbours(node, grid);\r\n  for (const ite of unvisitedNeighbours) {\r\n    ite.distance = node.distance + 1;\r\n    ite.previousNode = node;\r\n  }\r\n  return unvisitedNeighbours;\r\n}\r\n\r\nfunction getUnvisitedNeighbours(node, grid) {\r\n  const unvisitedNeighbours = [];\r\n  const { row, column } = node;\r\n  if (row - 1 >= 0 && grid[row - 1][column].isVisited !== true)\r\n    unvisitedNeighbours.push(grid[row - 1][column]);\r\n\r\n  if (row + 1 < grid.length && grid[row + 1][column].isVisited !== true)\r\n    unvisitedNeighbours.push(grid[row + 1][column]);\r\n\r\n  if (column - 1 >= 0 && grid[row][column - 1].isVisited !== true)\r\n    unvisitedNeighbours.push(grid[row][column - 1]);\r\n\r\n  if (column + 1 < grid[0].length && grid[row][column + 1].isVisited !== true)\r\n    unvisitedNeighbours.push(grid[row][column + 1]);\r\n\r\n  return unvisitedNeighbours;\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  let nodes = [];\r\n  for (let row of grid) {\r\n    for (let columns of row) {\r\n      nodes.push(columns);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nexport function getShortestPathDijkstra(grid, startNode, endNode) {\r\n  const shortestPath = [];\r\n  let previous = endNode.previousNode;\r\n  if (previous === null) {\r\n    return shortestPath;\r\n  }\r\n  while (previous !== startNode) {\r\n    shortestPath.push(previous);\r\n    previous = previous.previousNode;\r\n  }\r\n  shortestPath.reverse();\r\n  return shortestPath;\r\n}\r\n","//here distance is f in a* algo\r\n//f=g+h\r\nexport function aStar(grid, startNode, endNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance =\r\n    Math.abs(startNode.row - endNode.row) +\r\n    Math.abs(startNode.column - endNode.column);\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByValueF(unvisitedNodes);\r\n    const nextNode = unvisitedNodes.shift();\r\n    if (nextNode === Infinity) {\r\n      return visitedNodesInOrder;\r\n    }\r\n    if (nextNode.isWall) {\r\n      continue;\r\n    }\r\n    nextNode.isVisited = true;\r\n    visitedNodesInOrder.push(nextNode);\r\n    if (nextNode === endNode) {\r\n      return visitedNodesInOrder;\r\n    }\r\n    updateUnvisitedNeighbours(nextNode, endNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByValueF(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const toReturn = [];\r\n  for (let rows of grid) {\r\n    for (let columns of rows) {\r\n      toReturn.push(columns);\r\n    }\r\n  }\r\n  return toReturn;\r\n}\r\n\r\nfunction updateUnvisitedNeighbours(currentNode, targetNode, grid) {\r\n  const unvisitedNeighbours = getUnvisitedNeighbours(currentNode, grid);\r\n  for (let ite of unvisitedNeighbours) {\r\n    ite.distance =\r\n      currentNode.distance -\r\n      (Math.abs(currentNode.row - targetNode.row) +\r\n        Math.abs(currentNode.column - targetNode.column)) +\r\n      1 +\r\n      Math.abs(ite.row - targetNode.row) +\r\n      Math.abs(ite.column - targetNode.column);\r\n    ite.previousNode = currentNode;\r\n  }\r\n  return unvisitedNeighbours;\r\n}\r\n\r\nfunction getUnvisitedNeighbours(currentNode, grid) {\r\n  const unvisitedNeighbours = [];\r\n  const { row, column } = currentNode;\r\n  if (row - 1 >= 0 && grid[row - 1][column].isVisited !== true)\r\n    unvisitedNeighbours.push(grid[row - 1][column]);\r\n\r\n  if (row + 1 < grid.length && grid[row + 1][column].isVisited !== true)\r\n    unvisitedNeighbours.push(grid[row + 1][column]);\r\n\r\n  if (column - 1 >= 0 && grid[row][column - 1].isVisited !== true)\r\n    unvisitedNeighbours.push(grid[row][column - 1]);\r\n\r\n  if (column + 1 < grid[0].length && grid[row][column + 1].isVisited !== true)\r\n    unvisitedNeighbours.push(grid[row][column + 1]);\r\n\r\n  return unvisitedNeighbours;\r\n}\r\n\r\nexport function getShortestPathAstar(grid, startNode, endNode) {\r\n  const shortestPath = [];\r\n  let previous = endNode.previousNode;\r\n  if (previous === null) {\r\n    return shortestPath;\r\n  }\r\n  while (previous !== startNode) {\r\n    shortestPath.push(previous);\r\n    previous = previous.previousNode;\r\n  }\r\n  shortestPath.reverse();\r\n  return shortestPath;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./node/node.jsx\";\r\nimport \"./graphAlgoVisualizer.css\";\r\nimport { dijkstra, getShortestPathDijkstra } from \"../algorithms/dijkstra.js\";\r\nimport { aStar, getShortestPathAstar } from \"../algorithms/aStar.js\";\r\n\r\nconst total_rows = 18;\r\nconst total_columns = 50;\r\nconst startNode_Row = 10;\r\nconst startNode_Col = 10;\r\nconst endNode_Row = 10;\r\nconst endNode_Col = 40;\r\n\r\nclass GraphAlgoVisualizer extends Component {\r\n  state = {\r\n    grid: [],\r\n    isMousePressed: false,\r\n    timeComplexity: 0,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const grid = [];\r\n    for (let row = 0; row < total_rows; row++) {\r\n      const currentRow = [];\r\n      for (let column = 0; column < total_columns; column++) {\r\n        const currentNode = {\r\n          row,\r\n          column,\r\n          isStart: row === startNode_Row && column === startNode_Col,\r\n          isEnd: row === endNode_Row && column === endNode_Col,\r\n          distance: Infinity,\r\n          isVisited: false,\r\n          previousNode: null,\r\n          isWall: false,\r\n        };\r\n        currentRow.push(currentNode);\r\n      }\r\n      grid.push(currentRow);\r\n    }\r\n    this.setState({ grid });\r\n  }\r\n\r\n  getNewGridWithWallToggled = (row, column) => {\r\n    const newGrid = this.state.grid.slice();\r\n    const node = newGrid[row][column];\r\n    const newNode = {\r\n      ...node,\r\n      isWall: !node.isWall,\r\n    };\r\n    newGrid[row][column] = newNode;\r\n    return newGrid;\r\n  };\r\n\r\n  handleMouseDown = (row, column) => {\r\n    if (\r\n      !(\r\n        (row === startNode_Row && column === startNode_Col) ||\r\n        (row === endNode_Row && column === endNode_Col)\r\n      )\r\n    ) {\r\n      console.log(row, column, \"mouse down\");\r\n      const newGrid = this.getNewGridWithWallToggled(row, column);\r\n      this.setState({ grid: newGrid, isMousePressed: true });\r\n    } else {\r\n      console.log(row, column, \"mouse down starting or ending\");\r\n      this.setState({ isMousePressed: true });\r\n    }\r\n  };\r\n\r\n  handleMouseEnter = (row, column) => {\r\n    if (!this.state.isMousePressed) return;\r\n    if (\r\n      !(\r\n        (row === startNode_Row && column === startNode_Col) ||\r\n        (row === endNode_Row && column === endNode_Col)\r\n      )\r\n    ) {\r\n      console.log(row, column, \"mouse enter\");\r\n      const newGrid = this.getNewGridWithWallToggled(row, column);\r\n      this.setState({ grid: newGrid });\r\n    } else {\r\n      console.log(\"mouse entered starting or ending\");\r\n    }\r\n  };\r\n\r\n  handleMouseUp = () => {\r\n    console.log(\"mouse up\");\r\n    this.setState({ isMousePressed: false });\r\n  };\r\n\r\n  animateDijkstra = (visitedNodesInOrder, shortestPath) => {\r\n    for (let i = 1; i < visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length - 1) {\r\n        for (let j = 0; j < shortestPath.length; j++)\r\n          setTimeout(() => {\r\n            setTimeout(() => {\r\n              const node = shortestPath[j];\r\n              document.getElementById(\r\n                `node-${node.row}-${node.column}`\r\n              ).className = \"node node-shortestPath\";\r\n            }, 50 * j);\r\n          }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.column}`).className =\r\n          \"node node-visited\";\r\n      }, 10 * i);\r\n    }\r\n  };\r\n\r\n  animateAstar = (visitedNodesInOrder, shortestPath) => {\r\n    for (let i = 1; i < visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length - 1) {\r\n        for (let j = 0; j < shortestPath.length; j++)\r\n          setTimeout(() => {\r\n            setTimeout(() => {\r\n              const node = shortestPath[j];\r\n              document.getElementById(\r\n                `node-${node.row}-${node.column}`\r\n              ).className = \"node node-shortestPath\";\r\n            }, 50 * j);\r\n          }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.column}`).className =\r\n          \"node node-visited\";\r\n      }, 10 * i);\r\n    }\r\n  };\r\n\r\n  visualizeDijkstra = () => {\r\n    const { grid } = this.state;\r\n    const startNode = grid[startNode_Row][startNode_Col];\r\n    const endNode = grid[endNode_Row][endNode_Col];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, endNode);\r\n    //console.log(visitedNodesInOrder);\r\n    const shortestPath = getShortestPathDijkstra(grid, startNode, endNode);\r\n    //console.log(visitedNodesInOrder);\r\n    this.animateDijkstra(visitedNodesInOrder, shortestPath);\r\n    this.setState({ timeComplexity: visitedNodesInOrder.length });\r\n    // console.log(shortestPath);\r\n    // console.log(grid);\r\n  };\r\n\r\n  visualizeAstar = () => {\r\n    const { grid } = this.state;\r\n    const startNode = grid[startNode_Row][startNode_Col];\r\n    const endNode = grid[endNode_Row][endNode_Col];\r\n    const visitedNodesInOrder = aStar(grid, startNode, endNode);\r\n    //console.log(visitedNodesInOrder);\r\n    const shortestPath = getShortestPathAstar(grid, startNode, endNode);\r\n    console.log(visitedNodesInOrder);\r\n    this.animateAstar(visitedNodesInOrder, shortestPath);\r\n    this.setState({ timeComplexity: visitedNodesInOrder.length });\r\n    // console.log(shortestPath);\r\n    // console.log(grid);\r\n  };\r\n  render() {\r\n    const { grid } = this.state;\r\n    //  console.log(grid);\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <button\r\n          className=\"btn btn-primary btn-lg\"\r\n          onClick={this.visualizeDijkstra}\r\n        >\r\n          Visualize Dijkstra Algorithm\r\n        </button>\r\n        <button\r\n          className=\"btn btn-primary btn-lg\"\r\n          onClick={this.visualizeAstar}\r\n        >\r\n          Visualize A* Algorithm\r\n        </button>\r\n        <span className=\"time\">\r\n          Time Taken for this Algorithm = {this.state.timeComplexity}\r\n        </span>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {\r\n                    row,\r\n                    column,\r\n                    isStart,\r\n                    isEnd,\r\n                    distance,\r\n                    isVisited,\r\n                    previousNode,\r\n                    isWall,\r\n                    isMousePressed,\r\n                  } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      row={row}\r\n                      column={column}\r\n                      isStart={isStart}\r\n                      isEnd={isEnd}\r\n                      distance={distance}\r\n                      isVisited={isVisited}\r\n                      previousNode={previousNode}\r\n                      isWall={isWall}\r\n                      isMousePressed={isMousePressed}\r\n                      onMouseDown={(row, column) =>\r\n                        this.handleMouseDown(row, column)\r\n                      }\r\n                      onMouseEnter={(row, column) =>\r\n                        this.handleMouseEnter(row, column)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GraphAlgoVisualizer;\r\n","import React, { Component } from \"react\";\nimport GraphAlgoVisualizer from \"./graphAlgoVisualizer/graphAlgoVisualizer\";\n\nclass App extends Component {\n  state = {};\n  render() {\n    return <GraphAlgoVisualizer />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}